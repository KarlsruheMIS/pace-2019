!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
ARGTABLE2	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	22;"	d
ARG_ELIMIT	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^enum {ARG_ELIMIT=1, ARG_EMALLOC, ARG_ENOMATCH, ARG_ELONGOPT, ARG_EMISSARG};$/;"	e	enum:__anon2
ARG_ELONGOPT	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^enum {ARG_ELIMIT=1, ARG_EMALLOC, ARG_ENOMATCH, ARG_ELONGOPT, ARG_EMISSARG};$/;"	e	enum:__anon2
ARG_EMALLOC	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^enum {ARG_ELIMIT=1, ARG_EMALLOC, ARG_ENOMATCH, ARG_ELONGOPT, ARG_EMISSARG};$/;"	e	enum:__anon2
ARG_EMISSARG	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^enum {ARG_ELIMIT=1, ARG_EMALLOC, ARG_ENOMATCH, ARG_ELONGOPT, ARG_EMISSARG};$/;"	e	enum:__anon2
ARG_ENOMATCH	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^enum {ARG_ELIMIT=1, ARG_EMALLOC, ARG_ENOMATCH, ARG_ELONGOPT, ARG_EMISSARG};$/;"	e	enum:__anon2
ARG_HASOPTVALUE	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^    ARG_HASOPTVALUE=0x4$/;"	e	enum:__anon1
ARG_HASVALUE	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^    ARG_HASVALUE=0x2,$/;"	e	enum:__anon1
ARG_TERMINATOR	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^    ARG_TERMINATOR=0x1,$/;"	e	enum:__anon1
ASSERT_BETWEEN	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_assertions.h	147;"	d
ASSERT_BETWEEN	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_assertions.h	149;"	d
ASSERT_EQ	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_assertions.h	67;"	d
ASSERT_EQ	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_assertions.h	69;"	d
ASSERT_GEQ	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_assertions.h	131;"	d
ASSERT_GEQ	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_assertions.h	133;"	d
ASSERT_GT	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_assertions.h	101;"	d
ASSERT_GT	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_assertions.h	99;"	d
ASSERT_H	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_assertions.h	23;"	d
ASSERT_H_XSTR	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_common.h	52;"	d
ASSERT_LEQ	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_assertions.h	115;"	d
ASSERT_LEQ	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_assertions.h	117;"	d
ASSERT_LT	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_assertions.h	83;"	d
ASSERT_LT	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_assertions.h	85;"	d
ASSERT_NEQ	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_assertions.h	51;"	d
ASSERT_NEQ	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_assertions.h	53;"	d
ASSERT_RANGE_EQ	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_assertions.h	185;"	d
ASSERT_RANGE_EQ	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_assertions.h	187;"	d
ASSERT_RANGE_GEQ	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_assertions.h	175;"	d
ASSERT_RANGE_GEQ	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_assertions.h	177;"	d
ASSERT_RANGE_GT	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_assertions.h	164;"	d
ASSERT_RANGE_GT	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_assertions.h	166;"	d
ASSERT_TRUE	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_assertions.h	36;"	d
ASSERT_TRUE	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_assertions.h	38;"	d
AdditionalNonLocalNodeData	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^struct AdditionalNonLocalNodeData {$/;"	s
AdditionalNonLocalNodeData::globalID	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^    NodeID globalID:49;$/;"	m	struct:AdditionalNonLocalNodeData	access:public
AdditionalNonLocalNodeData::peID	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^    PEID   peID:15; \/\/ save a little bit of memory$/;"	m	struct:AdditionalNonLocalNodeData	access:public
BALANCE_MANAGEMENT_COARSENING_TS6EZN5A	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.h	23;"	d
BALANCE_MANAGEMENT_NJRUTX5K	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.h	23;"	d
BALANCE_MANAGEMENT_REFINEMENT_ZHYKQBYB	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.h	23;"	d
CONFIGURATION_3APG5V7ZA	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	24;"	d
DEBUG	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_common.h	27;"	d
DEFINITIONS_H_CHRA	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	23;"	d
DEGREE_LEASTGHOSTNODESFIRST_NODEODERING	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^	DEGREE_LEASTGHOSTNODESFIRST_NODEODERING$/;"	e	enum:__anon5
DEGREE_NODEORDERING	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^        DEGREE_NODEORDERING,$/;"	e	enum:__anon5
DISALLOW_ASSIGN	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_common.h	47;"	d
DISALLOW_COPY_AND_ASSIGN	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_common.h	41;"	d
DISTRIBUTED_EVOLUTIONARY_PARTITIONING_OJ2RIKR7	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/distributed_evolutionary_partitioning.h	23;"	d
DISTRIBUTED_PARTITIONER_ZYL2XF6R	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	23;"	d
DISTRIBUTED_QUALITY_METRICS_UAVSEXBT	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.h	24;"	d
DUMMY_OPERATIONS_UVZ6V6T7	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/dummy_operations.h	23;"	d
ECO	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/kaHIP_lib/kaHIP_interface.h	/^const int ECO             = 1;$/;"	v
ECOSOCIAL	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/kaHIP_lib/kaHIP_interface.h	/^const int ECOSOCIAL       = 4;$/;"	v
Edge	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^struct Edge {$/;"	s
Edge::local_target	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^    NodeID     local_target;$/;"	m	struct:Edge	access:public
Edge::weight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^    EdgeWeight weight;$/;"	m	struct:Edge	access:public
EdgeID	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^typedef unsigned long EdgeID;$/;"	t
EdgeWeight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^typedef unsigned long EdgeWeight;$/;"	t
FAST	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/kaHIP_lib/kaHIP_interface.h	/^const int FAST            = 0;$/;"	v
FASTSOCIAL	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/kaHIP_lib/kaHIP_interface.h	/^const int FASTSOCIAL      = 3;$/;"	v
FAST_64BIT_ARITHMETIC	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/user_settings.h	18;"	d
GENERATE_G500_EDGELIST_X69VQMCG	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_g500_edgelist.h	23;"	d
GENERATE_KRONECKER_UM0MTHVS	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_kronecker.h	23;"	d
GENERATOR_USE_PACKED_EDGE_TYPE	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/user_settings.h	16;"	d
GRAPH_GENERATOR_H	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.h	11;"	d
HASHED_GRAPH_DG1JG7O0	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/hashed_graph.h	23;"	d
HELPERS_ZUTE7MAJ	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/helpers.h	23;"	d
INITIAL_PARTITIONING_SFMCJN2U	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/initial_partitioning.h	23;"	d
INITIATOR_A_NUMERATOR	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.c	33;"	d	file:
INITIATOR_BC_NUMERATOR	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.c	34;"	d	file:
INITIATOR_DENOMINATOR	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.c	35;"	d	file:
InitialPartitioningAlgorithm	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^} InitialPartitioningAlgorithm;$/;"	t	typeref:enum:__anon4
KAFFPAEECO	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^        KAFFPAEECO,$/;"	e	enum:__anon4
KAFFPAEECOSNW	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^        KAFFPAEECOSNW,$/;"	e	enum:__anon4
KAFFPAEFAST	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^        KAFFPAEFAST,$/;"	e	enum:__anon4
KAFFPAEFASTSNW	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^        KAFFPAEFASTSNW,$/;"	e	enum:__anon4
KAFFPAESTRONG	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^        KAFFPAESTRONG,$/;"	e	enum:__anon4
KAFFPAESTRONGSNW	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^        KAFFPAESTRONGSNW,$/;"	e	enum:__anon4
KAFFPAEULTRAFASTSNW	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^        KAFFPAEULTRAFASTSNW,$/;"	e	enum:__anon4
KAFFPA_INTERFACE_RYEEZ6WJ	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/kaHIP_lib/kaHIP_interface.h	25;"	d
LEASTGHOSTNODESFIRST_DEGREE_NODEODERING	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^	LEASTGHOSTNODESFIRST_DEGREE_NODEODERING,$/;"	e	enum:__anon5
LogDump	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        void LogDump(FILE *out) const {$/;"	f	struct:PartitionConfig	access:public	signature:(FILE *out) const
MACROS_COMMON_H	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_common.h	23;"	d
MAKE_GRAPH_H	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/make_graph.h	11;"	d
MAXLINE	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.h	31;"	d
MOD_ARITH_32BIT_H	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_32bit.h	11;"	d
MOD_ARITH_64BIT_H	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_64bit.h	11;"	d
MOD_ARITH_H	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith.h	11;"	d
MOD_ARITH_XMT_H	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_xmt.h	11;"	d
MPI_TOOLS_HMESDXF2	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/mpi_tools.h	23;"	d
MersenneTwister	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^typedef std::tr1::mt19937 MersenneTwister;$/;"	t
NODE_ORDERING_HM1YMLB1	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/node_ordering.h	23;"	d
Node	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^struct Node {$/;"	s
Node::firstEdge	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^    EdgeID firstEdge;$/;"	m	struct:Node	access:public
NodeData	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^struct NodeData {$/;"	s
NodeData::block	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^    PartitionID block:15; \/\/ a given partition of the graph (for v-cycles)$/;"	m	struct:NodeData	access:public
NodeData::is_interface_node	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^    bool       is_interface_node:1; \/\/ save a little bit of memory$/;"	m	struct:NodeData	access:public
NodeData::label	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^    NodeID     label;$/;"	m	struct:NodeData	access:public
NodeData::weight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^    NodeWeight weight:48; \/\/ save a little bit of memory$/;"	m	struct:NodeData	access:public
NodeID	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^typedef unsigned long NodeID;$/;"	t
NodeOrderingType	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^} NodeOrderingType;$/;"	t	typeref:enum:__anon5
NodeWeight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^typedef unsigned long NodeWeight;$/;"	t
PARALLEL_BLOCK_DOWN_PROPAGATION_SRTCMH8F	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_block_down_propagation.h	23;"	d
PARALLEL_CONTRACTION_64O127GD	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.h	23;"	d
PARALLEL_GRAPH_ACCESS_X6O9MRS8	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	24;"	d
PARALLEL_GRAPH_IO_8HHCKD13	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.h	23;"	d
PARALLEL_LABEL_COMPRESS_9ME4H8DK	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/parallel_label_compress.h	23;"	d
PARALLEL_PROJECTION_HBRCPQ0P	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_projection.h	23;"	d
PARALLEL_VECTOR_IO_BZVNZ570	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_vector_io.h	23;"	d
PARSE_PARAMETERS_GPJMGSM8A	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/parse_parameters.h	24;"	d
PARTITION_CONFIG_DI1ES4T0A	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	23;"	d
PEID	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^typedef unsigned int PEID; $/;"	t
PERMUTATION_QUALITY_FAST	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^	PERMUTATION_QUALITY_FAST,  $/;"	e	enum:__anon3
PERMUTATION_QUALITY_GOOD	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^	PERMUTATION_QUALITY_GOOD$/;"	e	enum:__anon3
PERMUTATION_QUALITY_NONE	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^        PERMUTATION_QUALITY_NONE, $/;"	e	enum:__anon3
PRINT	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	35;"	d
PRINT	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	37;"	d
PartitionConfig	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        PartitionConfig() {}$/;"	f	struct:PartitionConfig	access:public	signature:()
PartitionConfig	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^struct PartitionConfig$/;"	s
PartitionConfig::LogDump	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        void LogDump(FILE *out) const {$/;"	f	struct:PartitionConfig	access:public	signature:(FILE *out) const
PartitionConfig::PartitionConfig	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        PartitionConfig() {}$/;"	f	struct:PartitionConfig	access:public	signature:()
PartitionConfig::cluster_coarsening_factor	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        double cluster_coarsening_factor;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::comm_rounds	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        unsigned long comm_rounds;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::edge_factor	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        long edge_factor;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::epsilon	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        unsigned epsilon;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::evolutionary_time_limit	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        int evolutionary_time_limit;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::generate_kronecker	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        bool generate_kronecker;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::graph_filename	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        std::string graph_filename;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::inbalance	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        unsigned inbalance;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::initial_partitioning_algorithm	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        InitialPartitioningAlgorithm initial_partitioning_algorithm;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::input_partition	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        std::string input_partition;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::k	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        PartitionID k;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::label_iterations	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        unsigned int label_iterations;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::label_iterations_coarsening	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        unsigned int label_iterations_coarsening;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::label_iterations_refinement	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        unsigned int label_iterations_refinement;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::log_num_verts	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        int log_num_verts;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::no_refinement_in_last_iteration	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        bool no_refinement_in_last_iteration;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::node_ordering	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        NodeOrderingType node_ordering;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::num_tries	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        int num_tries; \/\/ number of repetitions to perform$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::num_vcycles	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        int num_vcycles;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::number_of_overall_nodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        NodeID number_of_overall_nodes;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::permutation_quality	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        PermutationQuality permutation_quality;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::seed	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        int seed;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::stop_factor	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        int stop_factor;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::time_limit	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        double time_limit;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::total_num_labels	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        NodeID total_num_labels;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::upper_bound_cluster	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^	NodeWeight upper_bound_cluster;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::upper_bound_partition	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^	NodeWeight upper_bound_partition;$/;"	m	struct:PartitionConfig	access:public
PartitionConfig::vcycle	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        bool vcycle;$/;"	m	struct:PartitionConfig	access:public
PartitionID	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^typedef unsigned long PartitionID;$/;"	t
PermutationQuality	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^} PermutationQuality;$/;"	t	typeref:enum:__anon3
RANDOMIP	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^        RANDOMIP$/;"	e	enum:__anon4
RANDOM_FUNCTIONS_RMEPKWYT	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	23;"	d
RANDOM_INITIAL_PARTITIONING_FM8LJSI0	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/random_initial_partitioning.h	23;"	d
RANDOM_NODEORDERING	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^        RANDOM_NODEORDERING, $/;"	e	enum:__anon5
ROOT	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^const PEID ROOT = 0;$/;"	v
SPK_NOISE_LEVEL	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.c	44;"	d	file:
SPLITTABLE_MRG_H	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.h	11;"	d
STOP_RULE_23YOZ7GX	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/stop_rule.h	23;"	d
STR	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_common.h	55;"	d
STRONG	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/kaHIP_lib/kaHIP_interface.h	/^const int STRONG          = 2;$/;"	v
STRONGSOCIAL	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/kaHIP_lib/kaHIP_interface.h	/^const int STRONGSOCIAL    = 5;$/;"	v
TIMER_9KPDEP	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/timer.h	23;"	d
ULTRAFASTSOCIAL	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/kaHIP_lib/kaHIP_interface.h	/^const int ULTRAFASTSOCIAL = 6;$/;"	v
UNSAFE_metis_style_adjncy_array	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        int* UNSAFE_metis_style_adjncy_array();$/;"	p	class:parallel_graph_access	access:public	signature:()
UNSAFE_metis_style_adjncy_array	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline int* parallel_graph_access::UNSAFE_metis_style_adjncy_array() {$/;"	f	class:parallel_graph_access	signature:()
UNSAFE_metis_style_adjwgt_array	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        int* UNSAFE_metis_style_adjwgt_array();$/;"	p	class:parallel_graph_access	access:public	signature:()
UNSAFE_metis_style_adjwgt_array	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline int* parallel_graph_access::UNSAFE_metis_style_adjwgt_array() {$/;"	f	class:parallel_graph_access	signature:()
UNSAFE_metis_style_vwgt_array	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        int* UNSAFE_metis_style_vwgt_array();$/;"	p	class:parallel_graph_access	access:public	signature:()
UNSAFE_metis_style_vwgt_array	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline int* parallel_graph_access::UNSAFE_metis_style_vwgt_array() {$/;"	f	class:parallel_graph_access	signature:()
UNSAFE_metis_style_xadj_array	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        int* UNSAFE_metis_style_xadj_array();$/;"	p	class:parallel_graph_access	access:public	signature:()
UNSAFE_metis_style_xadj_array	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline int* parallel_graph_access::UNSAFE_metis_style_xadj_array() {$/;"	f	class:parallel_graph_access	signature:()
USER_SETTINGS_H	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/user_settings.h	11;"	d
USE_GCC_BYTESWAP	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.c	81;"	d	file:
UTILS_H	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/utils.h	11;"	d
VLOG	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_common.h	31;"	d
VLOG	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_common.h	34;"	d
VVLOG	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_common.h	32;"	d
VVLOG	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/macros_common.h	35;"	d
_STDINT_H	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_g500_edgelist.cpp	25;"	d	file:
_STDINT_H	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.c	12;"	d	file:
__STDC_CONSTANT_MACROS	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_g500_edgelist.cpp	23;"	d	file:
__STDC_CONSTANT_MACROS	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.c	10;"	d	file:
__STDC_CONSTANT_MACROS	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/utils.c	11;"	d	file:
__STDC_FORMAT_MACROS	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_g500_edgelist.cpp	33;"	d	file:
__STDC_FORMAT_MACROS	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.c	21;"	d	file:
__STDC_FORMAT_MACROS	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.h	19;"	d
__STDC_FORMAT_MACROS	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	13;"	d	file:
a	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^  uint_fast32_t a, b, c, d;$/;"	m	struct:mrg_transition_matrix	file:	access:public
addLabel	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void addLabel(NodeID node, NodeID label);$/;"	p	class:ghost_node_communication	access:public	signature:(NodeID node, NodeID label)
addLabel	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^void ghost_node_communication::addLabel(NodeID node, NodeID label) {$/;"	f	class:ghost_node_communication	signature:(NodeID node, NodeID label)
add_adjacent_processor	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void add_adjacent_processor( PEID peID) {$/;"	f	class:ghost_node_communication	access:public	signature:( PEID peID)
allocate_node_to_cnode	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void allocate_node_to_cnode() {$/;"	f	class:parallel_graph_access	access:public	signature:()
arg_checkfn	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^typedef int  (arg_checkfn)(void *parent);$/;"	t
arg_date	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_date$/;"	s
arg_date0	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_date* arg_date0(const char* shortopts,$/;"	p	signature:(const char* shortopts, const char* longopts, const char* format, const char* datatype, const char* glossary)
arg_date1	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_date* arg_date1(const char* shortopts,$/;"	p	signature:(const char* shortopts, const char* longopts, const char* format, const char* datatype, const char *glossary)
arg_date::count	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   int count;               \/* Number of matching command line args *\/$/;"	m	struct:arg_date	access:public
arg_date::format	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   const char *format;      \/* strptime format string used to parse the date *\/$/;"	m	struct:arg_date	access:public
arg_date::hdr	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   struct arg_hdr hdr;      \/* The mandatory argtable header struct *\/$/;"	m	struct:arg_date	typeref:struct:arg_date::arg_hdr	access:public
arg_date::tmval	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   struct tm *tmval;        \/* Array of parsed time values *\/$/;"	m	struct:arg_date	typeref:struct:arg_date::tm	access:public
arg_daten	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_date* arg_daten(const char* shortopts,$/;"	p	signature:(const char* shortopts, const char* longopts, const char* format, const char* datatype, int mincount, int maxcount, const char *glossary)
arg_dbl	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_dbl$/;"	s
arg_dbl0	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_dbl* arg_dbl0(const char* shortopts,$/;"	p	signature:(const char* shortopts, const char* longopts, const char* datatype, const char* glossary)
arg_dbl1	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_dbl* arg_dbl1(const char* shortopts,$/;"	p	signature:(const char* shortopts, const char* longopts, const char* datatype, const char *glossary)
arg_dbl::count	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   int count;               \/* Number of matching command line args *\/$/;"	m	struct:arg_dbl	access:public
arg_dbl::dval	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   double *dval;            \/* Array of parsed argument values *\/$/;"	m	struct:arg_dbl	access:public
arg_dbl::hdr	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   struct arg_hdr hdr;      \/* The mandatory argtable header struct *\/$/;"	m	struct:arg_dbl	typeref:struct:arg_dbl::arg_hdr	access:public
arg_dbln	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_dbl* arg_dbln(const char* shortopts,$/;"	p	signature:(const char* shortopts, const char* longopts, const char *datatype, int mincount, int maxcount, const char *glossary)
arg_end	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_end$/;"	s
arg_end	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_end* arg_end(int maxerrors);$/;"	p	signature:(int maxerrors)
arg_end::argval	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   const char **argval;     \/* Array of pointers to offending argv[] string *\/$/;"	m	struct:arg_end	access:public
arg_end::count	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   int count;               \/* Number of errors encountered *\/$/;"	m	struct:arg_end	access:public
arg_end::error	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   int *error;              \/* Array of error codes *\/$/;"	m	struct:arg_end	access:public
arg_end::hdr	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   struct arg_hdr hdr;      \/* The mandatory argtable header struct *\/$/;"	m	struct:arg_end	typeref:struct:arg_end::arg_hdr	access:public
arg_end::parent	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   void **parent;           \/* Array of pointers to offending arg_xxx struct *\/$/;"	m	struct:arg_end	access:public
arg_errorfn	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^typedef void (arg_errorfn)(void *parent, FILE *fp, int error, const char *argval, const char *progname);$/;"	t
arg_file	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_file$/;"	s
arg_file0	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_file* arg_file0(const char* shortopts,$/;"	p	signature:(const char* shortopts, const char* longopts, const char* datatype, const char* glossary)
arg_file1	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_file* arg_file1(const char* shortopts,$/;"	p	signature:(const char* shortopts, const char* longopts, const char* datatype, const char *glossary)
arg_file::basename	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   const char **basename;   \/* Array of parsed basenames  (eg: foo.bar) *\/$/;"	m	struct:arg_file	access:public
arg_file::count	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   int count;               \/* Number of matching command line args*\/$/;"	m	struct:arg_file	access:public
arg_file::extension	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   const char **extension;  \/* Array of parsed extensions (eg: bar) *\/$/;"	m	struct:arg_file	access:public
arg_file::filename	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   const char **filename;   \/* Array of parsed filenames  (eg: \/home\/foo.bar) *\/$/;"	m	struct:arg_file	access:public
arg_file::hdr	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   struct arg_hdr hdr;      \/* The mandatory argtable header struct *\/$/;"	m	struct:arg_file	typeref:struct:arg_file::arg_hdr	access:public
arg_filen	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_file* arg_filen(const char* shortopts,$/;"	p	signature:(const char* shortopts, const char* longopts, const char* datatype, int mincount, int maxcount, const char *glossary)
arg_free	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^void arg_free(void **argtable);$/;"	p	signature:(void **argtable)
arg_freetable	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^void arg_freetable(void **argtable, size_t n);$/;"	p	signature:(void **argtable, size_t n)
arg_hdr	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_hdr$/;"	s
arg_hdr::checkfn	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   arg_checkfn *checkfn;     \/* Pointer to parent arg_xxx check function *\/$/;"	m	struct:arg_hdr	access:public
arg_hdr::datatype	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   const char  *datatype;    \/* Description of the argument data type *\/$/;"	m	struct:arg_hdr	access:public
arg_hdr::errorfn	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   arg_errorfn *errorfn;     \/* Pointer to parent arg_xxx error function *\/$/;"	m	struct:arg_hdr	access:public
arg_hdr::flag	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   char         flag;        \/* Modifier flags: ARG_TERMINATOR, ARG_HASVALUE. *\/$/;"	m	struct:arg_hdr	access:public
arg_hdr::glossary	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   const char  *glossary;    \/* Description of the option as shown by arg_print_glossary function *\/$/;"	m	struct:arg_hdr	access:public
arg_hdr::longopts	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   const char  *longopts;    \/* String defiing the long options *\/$/;"	m	struct:arg_hdr	access:public
arg_hdr::maxcount	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   int          maxcount;    \/* Maximum number of occurences if this option accepted *\/$/;"	m	struct:arg_hdr	access:public
arg_hdr::mincount	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   int          mincount;    \/* Minimum number of occurences of this option accepted *\/$/;"	m	struct:arg_hdr	access:public
arg_hdr::parent	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   void        *parent;      \/* Pointer to parent arg_xxx struct *\/$/;"	m	struct:arg_hdr	access:public
arg_hdr::priv	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   void        *priv;        \/* Pointer to private header data for use by arg_xxx functions *\/$/;"	m	struct:arg_hdr	access:public
arg_hdr::resetfn	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   arg_resetfn *resetfn;     \/* Pointer to parent arg_xxx reset function *\/$/;"	m	struct:arg_hdr	access:public
arg_hdr::scanfn	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   arg_scanfn  *scanfn;      \/* Pointer to parent arg_xxx scan function *\/$/;"	m	struct:arg_hdr	access:public
arg_hdr::shortopts	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   const char  *shortopts;   \/* String defining the short options *\/$/;"	m	struct:arg_hdr	access:public
arg_int	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_int$/;"	s
arg_int0	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_int* arg_int0(const char* shortopts,$/;"	p	signature:(const char* shortopts, const char* longopts, const char* datatype, const char* glossary)
arg_int1	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_int* arg_int1(const char* shortopts,$/;"	p	signature:(const char* shortopts, const char* longopts, const char* datatype, const char *glossary)
arg_int::count	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   int count;               \/* Number of matching command line args *\/$/;"	m	struct:arg_int	access:public
arg_int::hdr	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   struct arg_hdr hdr;      \/* The mandatory argtable header struct *\/$/;"	m	struct:arg_int	typeref:struct:arg_int::arg_hdr	access:public
arg_int::ival	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   int *ival;               \/* Array of parsed argument values *\/$/;"	m	struct:arg_int	access:public
arg_intn	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_int* arg_intn(const char* shortopts,$/;"	p	signature:(const char* shortopts, const char* longopts, const char *datatype, int mincount, int maxcount, const char *glossary)
arg_key0	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_key* arg_key0(const char* keyword,$/;"	p	signature:(const char* keyword, int flags, const char* glossary)
arg_key1	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_key* arg_key1(const char* keyword,$/;"	p	signature:(const char* keyword, int flags, const char* glossary)
arg_keyn	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_key* arg_keyn(const char* keyword,$/;"	p	signature:(const char* keyword, int flags, int mincount, int maxcount, const char* glossary)
arg_lit	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_lit$/;"	s
arg_lit0	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_lit* arg_lit0(const char* shortopts,$/;"	p	signature:(const char* shortopts, const char* longopts, const char* glossary)
arg_lit1	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_lit* arg_lit1(const char* shortopts,$/;"	p	signature:(const char* shortopts, const char* longopts, const char *glossary)
arg_lit::count	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   int count;               \/* Number of matching command line args *\/$/;"	m	struct:arg_lit	access:public
arg_lit::hdr	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   struct arg_hdr hdr;      \/* The mandatory argtable header struct *\/$/;"	m	struct:arg_lit	typeref:struct:arg_lit::arg_hdr	access:public
arg_litn	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_lit* arg_litn(const char* shortopts,$/;"	p	signature:(const char* shortopts, const char* longopts, int mincount, int maxcount, const char *glossary)
arg_nullcheck	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^int arg_nullcheck(void **argtable);$/;"	p	signature:(void **argtable)
arg_parse	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^int arg_parse(int argc, char **argv, void **argtable);$/;"	p	signature:(int argc, char **argv, void **argtable)
arg_print_errors	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^void arg_print_errors(FILE* fp, struct arg_end* end, const char* progname);$/;"	p	signature:(FILE* fp, struct arg_end* end, const char* progname)
arg_print_glossary	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^void arg_print_glossary(FILE *fp, void **argtable, const char *format);$/;"	p	signature:(FILE *fp, void **argtable, const char *format)
arg_print_glossary_gnu	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^void arg_print_glossary_gnu(FILE *fp, void **argtable);$/;"	p	signature:(FILE *fp, void **argtable)
arg_print_option	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^void arg_print_option(FILE *fp, const char *shortopts, const char *longopts, const char *datatype, const char *suffix);$/;"	p	signature:(FILE *fp, const char *shortopts, const char *longopts, const char *datatype, const char *suffix)
arg_print_syntax	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^void arg_print_syntax(FILE *fp, void **argtable, const char *suffix);$/;"	p	signature:(FILE *fp, void **argtable, const char *suffix)
arg_print_syntaxv	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^void arg_print_syntaxv(FILE *fp, void **argtable, const char *suffix);$/;"	p	signature:(FILE *fp, void **argtable, const char *suffix)
arg_rem	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_rem$/;"	s
arg_rem	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_rem* arg_rem(const char* datatype, const char* glossary);$/;"	p	signature:(const char* datatype, const char* glossary)
arg_rem::hdr	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   struct arg_hdr hdr;      \/* The mandatory argtable header struct *\/$/;"	m	struct:arg_rem	typeref:struct:arg_rem::arg_hdr	access:public
arg_resetfn	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^typedef void (arg_resetfn)(void *parent);$/;"	t
arg_rex	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_rex$/;"	s
arg_rex0	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_rex* arg_rex0(const char* shortopts,$/;"	p	signature:(const char* shortopts, const char* longopts, const char* pattern, const char* datatype, int flags, const char* glossary)
arg_rex1	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_rex* arg_rex1(const char* shortopts,$/;"	p	signature:(const char* shortopts, const char* longopts, const char* pattern, const char* datatype, int flags, const char *glossary)
arg_rex::count	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   int count;               \/* Number of matching command line args *\/$/;"	m	struct:arg_rex	access:public
arg_rex::hdr	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   struct arg_hdr hdr;      \/* The mandatory argtable header struct *\/$/;"	m	struct:arg_rex	typeref:struct:arg_rex::arg_hdr	access:public
arg_rex::sval	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   const char **sval;       \/* Array of parsed argument values *\/$/;"	m	struct:arg_rex	access:public
arg_rexn	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_rex* arg_rexn(const char* shortopts,$/;"	p	signature:(const char* shortopts, const char* longopts, const char* pattern, const char* datatype, int mincount, int maxcount, int flags, const char *glossary)
arg_scanfn	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^typedef int  (arg_scanfn)(void *parent, const char *argval);$/;"	t
arg_str	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_str$/;"	s
arg_str0	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_str* arg_str0(const char* shortopts,$/;"	p	signature:(const char* shortopts, const char* longopts, const char* datatype, const char* glossary)
arg_str1	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_str* arg_str1(const char* shortopts,$/;"	p	signature:(const char* shortopts, const char* longopts, const char* datatype, const char *glossary)
arg_str::count	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   int count;               \/* Number of matching command line args *\/$/;"	m	struct:arg_str	access:public
arg_str::hdr	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   struct arg_hdr hdr;      \/* The mandatory argtable header struct *\/$/;"	m	struct:arg_str	typeref:struct:arg_str::arg_hdr	access:public
arg_str::sval	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   const char **sval;       \/* Array of parsed argument values *\/$/;"	m	struct:arg_str	access:public
arg_strn	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^struct arg_str* arg_strn(const char* shortopts,$/;"	p	signature:(const char* shortopts, const char* longopts, const char* datatype, int mincount, int maxcount, const char *glossary)
argval	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   const char **argval;     \/* Array of pointers to offending argv[] string *\/$/;"	m	struct:arg_end	access:public
b	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^  uint_fast32_t a, b, c, d;$/;"	m	struct:mrg_transition_matrix	file:	access:public
balance	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.cpp	/^double distributed_quality_metrics::balance( PartitionConfig & config, parallel_graph_access & G ) {$/;"	f	class:distributed_quality_metrics	signature:( PartitionConfig & config, parallel_graph_access & G )
balance	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.h	/^        double balance( PartitionConfig & config, parallel_graph_access & G );$/;"	p	class:distributed_quality_metrics	access:public	signature:( PartitionConfig & config, parallel_graph_access & G )
balance_management	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.cpp	/^balance_management::balance_management( parallel_graph_access * G, NodeID total_num_labels ) : m_G ( G ), m_total_num_labels ( total_num_labels ) {$/;"	f	class:balance_management	signature:( parallel_graph_access * G, NodeID total_num_labels )
balance_management	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.h	/^        balance_management( parallel_graph_access * G, NodeID total_num_labels);$/;"	p	class:balance_management	access:public	signature:( parallel_graph_access * G, NodeID total_num_labels)
balance_management	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.h	/^        balance_management() {};$/;"	f	class:balance_management	access:protected	signature:()
balance_management	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.h	/^class balance_management {$/;"	c
balance_management::balance_management	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.cpp	/^balance_management::balance_management( parallel_graph_access * G, NodeID total_num_labels ) : m_G ( G ), m_total_num_labels ( total_num_labels ) {$/;"	f	class:balance_management	signature:( parallel_graph_access * G, NodeID total_num_labels )
balance_management::balance_management	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.h	/^        balance_management( parallel_graph_access * G, NodeID total_num_labels);$/;"	p	class:balance_management	access:public	signature:( parallel_graph_access * G, NodeID total_num_labels)
balance_management::balance_management	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.h	/^        balance_management() {};$/;"	f	class:balance_management	access:protected	signature:()
balance_management::getBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.h	/^        virtual NodeWeight getBlockSize( PartitionID block ) = 0;$/;"	p	class:balance_management	access:public	signature:( PartitionID block )
balance_management::init	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.h	/^        virtual void init() = 0;$/;"	p	class:balance_management	access:public	signature:()
balance_management::m_G	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.h	/^        parallel_graph_access * m_G;$/;"	m	class:balance_management	access:protected
balance_management::m_total_num_labels	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.h	/^        NodeID  m_total_num_labels;$/;"	m	class:balance_management	access:protected
balance_management::setBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.h	/^        virtual void setBlockSize( PartitionID block, NodeWeight block_size ) = 0;$/;"	p	class:balance_management	access:public	signature:( PartitionID block, NodeWeight block_size )
balance_management::update	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.h	/^        virtual void update() = 0;$/;"	p	class:balance_management	access:public	signature:()
balance_management::update_non_contained_block_balance	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.h	/^        virtual void update_non_contained_block_balance( PartitionID from, PartitionID to, NodeWeight node_weight) = 0;$/;"	p	class:balance_management	access:public	signature:( PartitionID from, PartitionID to, NodeWeight node_weight)
balance_management::~balance_management	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.cpp	/^balance_management::~balance_management() {$/;"	f	class:balance_management	signature:()
balance_management::~balance_management	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.h	/^        virtual ~balance_management();$/;"	p	class:balance_management	access:public	signature:()
balance_management_coarsening	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.cpp	/^balance_management_coarsening::balance_management_coarsening(parallel_graph_access * G, PartitionID total_num_labels) $/;"	f	class:balance_management_coarsening	signature:(parallel_graph_access * G, PartitionID total_num_labels)
balance_management_coarsening	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.h	/^        balance_management_coarsening( parallel_graph_access * G, PartitionID num_labels );$/;"	p	class:balance_management_coarsening	access:public	signature:( parallel_graph_access * G, PartitionID num_labels )
balance_management_coarsening	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.h	/^class balance_management_coarsening : public balance_management {$/;"	c	inherits:balance_management
balance_management_coarsening::balance_management_coarsening	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.cpp	/^balance_management_coarsening::balance_management_coarsening(parallel_graph_access * G, PartitionID total_num_labels) $/;"	f	class:balance_management_coarsening	signature:(parallel_graph_access * G, PartitionID total_num_labels)
balance_management_coarsening::balance_management_coarsening	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.h	/^        balance_management_coarsening( parallel_graph_access * G, PartitionID num_labels );$/;"	p	class:balance_management_coarsening	access:public	signature:( parallel_graph_access * G, PartitionID num_labels )
balance_management_coarsening::getBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.h	/^        virtual NodeWeight getBlockSize( PartitionID block );$/;"	p	class:balance_management_coarsening	access:public	signature:( PartitionID block )
balance_management_coarsening::getBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.h	/^NodeWeight balance_management_coarsening::getBlockSize( PartitionID block ) {$/;"	f	class:balance_management_coarsening	signature:( PartitionID block )
balance_management_coarsening::init	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.cpp	/^void balance_management_coarsening::init(  ) {$/;"	f	class:balance_management_coarsening	signature:( )
balance_management_coarsening::init	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.h	/^        virtual void init();$/;"	p	class:balance_management_coarsening	access:public	signature:()
balance_management_coarsening::m_fuzzy_block_weights	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.h	/^        std::unordered_map< PartitionID, long > m_fuzzy_block_weights;$/;"	m	class:balance_management_coarsening	access:private
balance_management_coarsening::setBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.h	/^        virtual void setBlockSize( PartitionID block, NodeWeight block_size );$/;"	p	class:balance_management_coarsening	access:public	signature:( PartitionID block, NodeWeight block_size )
balance_management_coarsening::setBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.h	/^void balance_management_coarsening::setBlockSize( PartitionID block, NodeWeight block_size ) {$/;"	f	class:balance_management_coarsening	signature:( PartitionID block, NodeWeight block_size )
balance_management_coarsening::update	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.cpp	/^void balance_management_coarsening::update( ) {$/;"	f	class:balance_management_coarsening	signature:( )
balance_management_coarsening::update	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.h	/^        virtual void update();$/;"	p	class:balance_management_coarsening	access:public	signature:()
balance_management_coarsening::update_non_contained_block_balance	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.h	/^        virtual void update_non_contained_block_balance( PartitionID from, PartitionID to, NodeWeight node_weight);$/;"	p	class:balance_management_coarsening	access:public	signature:( PartitionID from, PartitionID to, NodeWeight node_weight)
balance_management_coarsening::update_non_contained_block_balance	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.h	/^void balance_management_coarsening::update_non_contained_block_balance( PartitionID from, PartitionID to, NodeWeight node_weight) {$/;"	f	class:balance_management_coarsening	signature:( PartitionID from, PartitionID to, NodeWeight node_weight)
balance_management_coarsening::~balance_management_coarsening	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.cpp	/^balance_management_coarsening::~balance_management_coarsening() {$/;"	f	class:balance_management_coarsening	signature:()
balance_management_coarsening::~balance_management_coarsening	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.h	/^        virtual ~balance_management_coarsening();$/;"	p	class:balance_management_coarsening	access:public	signature:()
balance_management_refinement	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.cpp	/^balance_management_refinement::balance_management_refinement(parallel_graph_access * G, PartitionID total_num_labels)$/;"	f	class:balance_management_refinement	signature:(parallel_graph_access * G, PartitionID total_num_labels)
balance_management_refinement	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.h	/^        balance_management_refinement( parallel_graph_access * G, NodeID num_labels);$/;"	p	class:balance_management_refinement	access:public	signature:( parallel_graph_access * G, NodeID num_labels)
balance_management_refinement	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.h	/^class balance_management_refinement : public balance_management {$/;"	c	inherits:balance_management
balance_management_refinement::balance_management_refinement	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.cpp	/^balance_management_refinement::balance_management_refinement(parallel_graph_access * G, PartitionID total_num_labels)$/;"	f	class:balance_management_refinement	signature:(parallel_graph_access * G, PartitionID total_num_labels)
balance_management_refinement::balance_management_refinement	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.h	/^        balance_management_refinement( parallel_graph_access * G, NodeID num_labels);$/;"	p	class:balance_management_refinement	access:public	signature:( parallel_graph_access * G, NodeID num_labels)
balance_management_refinement::getBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.h	/^        virtual NodeWeight getBlockSize( PartitionID block );$/;"	p	class:balance_management_refinement	access:public	signature:( PartitionID block )
balance_management_refinement::getBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.h	/^NodeWeight balance_management_refinement::getBlockSize( PartitionID block ) {$/;"	f	class:balance_management_refinement	signature:( PartitionID block )
balance_management_refinement::init	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.cpp	/^void balance_management_refinement::init() {$/;"	f	class:balance_management_refinement	signature:()
balance_management_refinement::init	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.h	/^        virtual void init();$/;"	p	class:balance_management_refinement	access:public	signature:()
balance_management_refinement::m_local_block_weights	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.h	/^        std::vector< NodeWeight > m_local_block_weights;$/;"	m	class:balance_management_refinement	access:private
balance_management_refinement::m_total_block_weights	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.h	/^        std::vector< NodeWeight > m_total_block_weights;$/;"	m	class:balance_management_refinement	access:private
balance_management_refinement::setBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.h	/^        virtual void setBlockSize( PartitionID block, NodeWeight block_size ) ;$/;"	p	class:balance_management_refinement	access:public	signature:( PartitionID block, NodeWeight block_size )
balance_management_refinement::setBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.h	/^void balance_management_refinement::setBlockSize( PartitionID block, NodeWeight block_size ) {$/;"	f	class:balance_management_refinement	signature:( PartitionID block, NodeWeight block_size )
balance_management_refinement::update	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.cpp	/^void balance_management_refinement::update() {$/;"	f	class:balance_management_refinement	signature:()
balance_management_refinement::update	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.h	/^        virtual void update();$/;"	p	class:balance_management_refinement	access:public	signature:()
balance_management_refinement::update_non_contained_block_balance	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.h	/^        virtual void update_non_contained_block_balance( PartitionID from, PartitionID to, NodeWeight node_weight) {\/*noop*\/};$/;"	f	class:balance_management_refinement	access:public	signature:( PartitionID from, PartitionID to, NodeWeight node_weight)
balance_management_refinement::~balance_management_refinement	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.cpp	/^balance_management_refinement::~balance_management_refinement() {$/;"	f	class:balance_management_refinement	signature:()
balance_management_refinement::~balance_management_refinement	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.h	/^        virtual ~balance_management_refinement();$/;"	p	class:balance_management_refinement	access:public	signature:()
balance_second	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.cpp	/^double distributed_quality_metrics::balance_second( PartitionConfig & config, parallel_graph_access & G ) {$/;"	f	class:distributed_quality_metrics	signature:( PartitionConfig & config, parallel_graph_access & G )
balance_second	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.h	/^        double balance_second( PartitionConfig & config, parallel_graph_access & G );$/;"	p	class:distributed_quality_metrics	access:public	signature:( PartitionConfig & config, parallel_graph_access & G )
basename	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   const char **basename;   \/* Array of parsed basenames  (eg: foo.bar) *\/$/;"	m	struct:arg_file	access:public
bitreverse	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.c	/^static inline uint64_t bitreverse(uint64_t x) {$/;"	f	file:	signature:(uint64_t x)
block	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^    PartitionID block:15; \/\/ a given partition of the graph (for v-cycles)$/;"	m	struct:NodeData	access:public
build_from_metis	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        int build_from_metis(int n, int* xadj, int* adjncy);$/;"	p	class:parallel_graph_access	access:public	signature:(int n, int* xadj, int* adjncy)
build_from_metis	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline int parallel_graph_access::build_from_metis(int n, int* xadj, int* adjncy) {$/;"	f	class:parallel_graph_access	signature:(int n, int* xadj, int* adjncy)
build_from_metis_weighted	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        int build_from_metis_weighted(int n, int* xadj, int* adjncy, int * vwgt, int* adjwgt);$/;"	p	class:parallel_graph_access	access:public	signature:(int n, int* xadj, int* adjncy, int * vwgt, int* adjwgt)
build_from_metis_weighted	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline int parallel_graph_access::build_from_metis_weighted(int n, int* xadj, int* adjncy, int * vwgt, int* adjwgt) {$/;"	f	class:parallel_graph_access	signature:(int n, int* xadj, int* adjncy, int * vwgt, int* adjwgt)
build_quotient_graph_locally	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.cpp	/^void parallel_contraction::build_quotient_graph_locally( parallel_graph_access & G, $/;"	f	class:parallel_contraction	signature:( parallel_graph_access & G, NodeID number_of_distinct_labels, hashed_graph & hG, std::unordered_map< NodeID, NodeWeight > & node_weights)
build_quotient_graph_locally	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.h	/^	void build_quotient_graph_locally( parallel_graph_access & G, $/;"	p	class:parallel_contraction	access:private	signature:( parallel_graph_access & G, NodeID number_of_distinct_labels, hashed_graph & hG, std::unordered_map< NodeID, NodeWeight > & node_weights)
c	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^  uint_fast32_t a, b, c, d;$/;"	m	struct:mrg_transition_matrix	file:	access:public
check	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.cpp	/^void distributed_partitioner::check( PartitionConfig & config, parallel_graph_access & G) {$/;"	f	class:distributed_partitioner	signature:( PartitionConfig & config, parallel_graph_access & G)
check	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        void check( PartitionConfig & config, parallel_graph_access & G);$/;"	p	class:distributed_partitioner	access:public	signature:( PartitionConfig & config, parallel_graph_access & G)
check_labels	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.cpp	/^void distributed_partitioner::check_labels( PartitionConfig & config, parallel_graph_access & G) {$/;"	f	class:distributed_partitioner	signature:( PartitionConfig & config, parallel_graph_access & G)
check_labels	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        void check_labels( PartitionConfig & config, parallel_graph_access & G);$/;"	p	class:distributed_partitioner	access:public	signature:( PartitionConfig & config, parallel_graph_access & G)
checkfn	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   arg_checkfn *checkfn;     \/* Pointer to parent arg_xxx check function *\/$/;"	m	struct:arg_hdr	access:public
circular_permutation	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                        static void circular_permutation(std::vector<sometype> & vec) {$/;"	f	class:random_functions	access:public	signature:(std::vector<sometype> & vec)
cluster_coarsening_factor	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        double cluster_coarsening_factor;$/;"	m	struct:PartitionConfig	access:public
collect_and_write_labels	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/mpi_tools.cpp	/^void mpi_tools::collect_and_write_labels( PartitionConfig & config, parallel_graph_access & G) {$/;"	f	class:mpi_tools	signature:( PartitionConfig & config, parallel_graph_access & G)
collect_and_write_labels	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/mpi_tools.h	/^        void collect_and_write_labels( PartitionConfig & config, $/;"	p	class:mpi_tools	access:public	signature:( PartitionConfig & config, parallel_graph_access & G)
collect_parallel_graph_to_local_graph	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/mpi_tools.cpp	/^void mpi_tools::collect_parallel_graph_to_local_graph( PartitionConfig & config, $/;"	f	class:mpi_tools	signature:( PartitionConfig & config, parallel_graph_access & G, complete_graph_access & Q)
collect_parallel_graph_to_local_graph	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/mpi_tools.h	/^        void collect_parallel_graph_to_local_graph( PartitionConfig & config, $/;"	p	class:mpi_tools	access:public	signature:( PartitionConfig & config, parallel_graph_access & G, complete_graph_access & Q)
comm_rounds	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        unsigned long comm_rounds;$/;"	m	struct:PartitionConfig	access:public
compare_hashed_edge	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/hashed_graph.h	/^struct compare_hashed_edge {$/;"	s
compare_hashed_edge::operator ()	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/hashed_graph.h	/^        bool operator()(const hashed_edge e_1, const hashed_edge e_2) const {$/;"	f	struct:compare_hashed_edge	access:public	signature:(const hashed_edge e_1, const hashed_edge e_2) const
complete_graph_access	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^typedef parallel_graph_access complete_graph_access; \/\/ this is just a naming convention for a graph that is completely local$/;"	t
compute_edge_range	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/make_graph.c	/^static void compute_edge_range(int rank, int size, int64_t M, int64_t* start_idx, int64_t* end_idx) {$/;"	f	file:	signature:(int rank, int size, int64_t M, int64_t* start_idx, int64_t* end_idx)
compute_label_mapping	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.cpp	/^void parallel_contraction::compute_label_mapping( parallel_graph_access & G, $/;"	f	class:parallel_contraction	signature:( parallel_graph_access & G, NodeID & global_num_distinct_ids, std::unordered_map< NodeID, NodeID > & label_mapping )
compute_label_mapping	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.h	/^        void compute_label_mapping( parallel_graph_access & G, $/;"	p	class:parallel_contraction	access:private	signature:( parallel_graph_access & G, NodeID & global_num_distinct_ids, std::unordered_map< NodeID, NodeID > & label_mapping)
configuration	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	/^                configuration() {} ;$/;"	f	class:configuration	access:public	signature:()
configuration	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	/^class configuration {$/;"	c
configuration::configuration	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	/^                configuration() {} ;$/;"	f	class:configuration	access:public	signature:()
configuration::eco	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	/^                void eco( PartitionConfig & config );$/;"	p	class:configuration	access:public	signature:( PartitionConfig & config )
configuration::eco	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	/^inline void configuration::eco( PartitionConfig & partition_config ) {$/;"	f	class:configuration	signature:( PartitionConfig & partition_config )
configuration::fast	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	/^                void fast( PartitionConfig & config );$/;"	p	class:configuration	access:public	signature:( PartitionConfig & config )
configuration::fast	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	/^inline void configuration::fast( PartitionConfig & partition_config ) {$/;"	f	class:configuration	signature:( PartitionConfig & partition_config )
configuration::standard	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	/^                void standard( PartitionConfig & config );$/;"	p	class:configuration	access:public	signature:( PartitionConfig & config )
configuration::standard	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	/^inline void configuration::standard( PartitionConfig & partition_config ) {$/;"	f	class:configuration	signature:( PartitionConfig & partition_config )
configuration::strong	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	/^                void strong( PartitionConfig & config );$/;"	p	class:configuration	access:public	signature:( PartitionConfig & config )
configuration::strong	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	/^inline void configuration::strong( PartitionConfig & partition_config ) {$/;"	f	class:configuration	signature:( PartitionConfig & partition_config )
configuration::ultrafast	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	/^                void ultrafast( PartitionConfig & config );$/;"	p	class:configuration	access:public	signature:( PartitionConfig & config )
configuration::ultrafast	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	/^inline void configuration::ultrafast( PartitionConfig & partition_config ) {$/;"	f	class:configuration	signature:( PartitionConfig & partition_config )
configuration::~configuration	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	/^                virtual ~configuration() {};$/;"	f	class:configuration	access:public	signature:()
contract_to_distributed_quotient	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.cpp	/^void parallel_contraction::contract_to_distributed_quotient( PartitionConfig & config, $/;"	f	class:parallel_contraction	signature:( PartitionConfig & config, parallel_graph_access & G, parallel_graph_access & Q)
contract_to_distributed_quotient	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.h	/^        void contract_to_distributed_quotient( PartitionConfig & config, $/;"	p	class:parallel_contraction	access:public	signature:( PartitionConfig & config, parallel_graph_access & G, parallel_graph_access & Q)
contraction_stop	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/stop_rule.h	/^        bool contraction_stop( PartitionConfig & config, parallel_graph_access & finer, parallel_graph_access & coarser) {$/;"	f	class:stop_rule	access:public	signature:( PartitionConfig & config, parallel_graph_access & finer, parallel_graph_access & coarser)
contraction_stop_decision	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        stop_rule contraction_stop_decision;$/;"	m	class:distributed_partitioner	access:private
count	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   int count;               \/* Number of errors encountered *\/$/;"	m	struct:arg_end	access:public
count	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   int count;               \/* Number of matching command line args *\/$/;"	m	struct:arg_date	access:public
count	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   int count;               \/* Number of matching command line args *\/$/;"	m	struct:arg_dbl	access:public
count	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   int count;               \/* Number of matching command line args *\/$/;"	m	struct:arg_int	access:public
count	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   int count;               \/* Number of matching command line args *\/$/;"	m	struct:arg_lit	access:public
count	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   int count;               \/* Number of matching command line args *\/$/;"	m	struct:arg_rex	access:public
count	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   int count;               \/* Number of matching command line args *\/$/;"	m	struct:arg_str	access:public
count	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   int count;               \/* Number of matching command line args*\/$/;"	m	struct:arg_file	access:public
d	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^  uint_fast32_t a, b, c, d;$/;"	m	struct:mrg_transition_matrix	file:	access:public
data_hashed_edge	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/hashed_graph.h	/^        data_hashed_edge() {$/;"	f	struct:data_hashed_edge	access:public	signature:()
data_hashed_edge	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/hashed_graph.h	/^struct data_hashed_edge{$/;"	s
data_hashed_edge::data_hashed_edge	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/hashed_graph.h	/^        data_hashed_edge() {$/;"	f	struct:data_hashed_edge	access:public	signature:()
data_hashed_edge::weight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/hashed_graph.h	/^        NodeWeight weight;$/;"	m	struct:data_hashed_edge	access:public
datatype	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   const char  *datatype;    \/* Description of the argument data type *\/$/;"	m	struct:arg_hdr	access:public
distribute_local_graph	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/mpi_tools.cpp	/^void mpi_tools::distribute_local_graph( PartitionConfig & config, $/;"	f	class:mpi_tools	signature:( PartitionConfig & config, complete_graph_access & G)
distribute_local_graph	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/mpi_tools.h	/^        void distribute_local_graph( PartitionConfig & config, complete_graph_access & G);$/;"	p	class:mpi_tools	access:public	signature:( PartitionConfig & config, complete_graph_access & G)
distributed_evolutionary_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/distributed_evolutionary_partitioning.cpp	/^distributed_evolutionary_partitioning::distributed_evolutionary_partitioning() {$/;"	f	class:distributed_evolutionary_partitioning	signature:()
distributed_evolutionary_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/distributed_evolutionary_partitioning.h	/^        distributed_evolutionary_partitioning();$/;"	p	class:distributed_evolutionary_partitioning	access:public	signature:()
distributed_evolutionary_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/distributed_evolutionary_partitioning.h	/^class distributed_evolutionary_partitioning {$/;"	c
distributed_evolutionary_partitioning::distributed_evolutionary_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/distributed_evolutionary_partitioning.cpp	/^distributed_evolutionary_partitioning::distributed_evolutionary_partitioning() {$/;"	f	class:distributed_evolutionary_partitioning	signature:()
distributed_evolutionary_partitioning::distributed_evolutionary_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/distributed_evolutionary_partitioning.h	/^        distributed_evolutionary_partitioning();$/;"	p	class:distributed_evolutionary_partitioning	access:public	signature:()
distributed_evolutionary_partitioning::perform_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/distributed_evolutionary_partitioning.cpp	/^void distributed_evolutionary_partitioning::perform_partitioning( PartitionConfig & config, $/;"	f	class:distributed_evolutionary_partitioning	signature:( PartitionConfig & config, parallel_graph_access & Q)
distributed_evolutionary_partitioning::perform_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/distributed_evolutionary_partitioning.h	/^        void perform_partitioning( PartitionConfig & config, parallel_graph_access & G);$/;"	p	class:distributed_evolutionary_partitioning	access:public	signature:( PartitionConfig & config, parallel_graph_access & G)
distributed_evolutionary_partitioning::~distributed_evolutionary_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/distributed_evolutionary_partitioning.cpp	/^distributed_evolutionary_partitioning::~distributed_evolutionary_partitioning() {$/;"	f	class:distributed_evolutionary_partitioning	signature:()
distributed_evolutionary_partitioning::~distributed_evolutionary_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/distributed_evolutionary_partitioning.h	/^        virtual ~distributed_evolutionary_partitioning();$/;"	p	class:distributed_evolutionary_partitioning	access:public	signature:()
distributed_partitioner	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.cpp	/^distributed_partitioner::distributed_partitioner() {$/;"	f	class:distributed_partitioner	signature:()
distributed_partitioner	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        distributed_partitioner();$/;"	p	class:distributed_partitioner	access:public	signature:()
distributed_partitioner	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^class distributed_partitioner {$/;"	c
distributed_partitioner::check	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.cpp	/^void distributed_partitioner::check( PartitionConfig & config, parallel_graph_access & G) {$/;"	f	class:distributed_partitioner	signature:( PartitionConfig & config, parallel_graph_access & G)
distributed_partitioner::check	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        void check( PartitionConfig & config, parallel_graph_access & G);$/;"	p	class:distributed_partitioner	access:public	signature:( PartitionConfig & config, parallel_graph_access & G)
distributed_partitioner::check_labels	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.cpp	/^void distributed_partitioner::check_labels( PartitionConfig & config, parallel_graph_access & G) {$/;"	f	class:distributed_partitioner	signature:( PartitionConfig & config, parallel_graph_access & G)
distributed_partitioner::check_labels	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        void check_labels( PartitionConfig & config, parallel_graph_access & G);$/;"	p	class:distributed_partitioner	access:public	signature:( PartitionConfig & config, parallel_graph_access & G)
distributed_partitioner::contraction_stop_decision	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        stop_rule contraction_stop_decision;$/;"	m	class:distributed_partitioner	access:private
distributed_partitioner::distributed_partitioner	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.cpp	/^distributed_partitioner::distributed_partitioner() {$/;"	f	class:distributed_partitioner	signature:()
distributed_partitioner::distributed_partitioner	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        distributed_partitioner();$/;"	p	class:distributed_partitioner	access:public	signature:()
distributed_partitioner::generate_random_choices	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.cpp	/^void distributed_partitioner::generate_random_choices( PartitionConfig & config ){$/;"	f	class:distributed_partitioner	signature:( PartitionConfig & config )
distributed_partitioner::generate_random_choices	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        static void generate_random_choices( PartitionConfig & config ) ;$/;"	p	class:distributed_partitioner	access:public	signature:( PartitionConfig & config )
distributed_partitioner::m_cf	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.cpp	/^std::vector< NodeID > distributed_partitioner::m_cf = std::vector< NodeID >();$/;"	m	class:distributed_partitioner	file:
distributed_partitioner::m_cf	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        static std::vector< NodeID > m_cf;$/;"	m	class:distributed_partitioner	access:private
distributed_partitioner::m_cur_rnd_choice	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        NodeID m_cur_rnd_choice;$/;"	m	class:distributed_partitioner	access:private
distributed_partitioner::m_cycle	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        int m_cycle;$/;"	m	class:distributed_partitioner	access:private
distributed_partitioner::m_level	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        int m_level;$/;"	m	class:distributed_partitioner	access:private
distributed_partitioner::m_lic	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.cpp	/^std::vector< NodeID > distributed_partitioner::m_lic = std::vector< NodeID >();$/;"	m	class:distributed_partitioner	file:
distributed_partitioner::m_lic	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        static std::vector< NodeID > m_lic;$/;"	m	class:distributed_partitioner	access:private
distributed_partitioner::m_sf	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.cpp	/^std::vector< NodeID > distributed_partitioner::m_sf = std::vector< NodeID >();$/;"	m	class:distributed_partitioner	file:
distributed_partitioner::m_sf	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        static std::vector< NodeID > m_sf;$/;"	m	class:distributed_partitioner	access:private
distributed_partitioner::m_t	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        timer m_t; $/;"	m	class:distributed_partitioner	access:private
distributed_partitioner::m_total_graph_weight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        NodeWeight m_total_graph_weight;$/;"	m	class:distributed_partitioner	access:private
distributed_partitioner::perform_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.cpp	/^void distributed_partitioner::perform_partitioning( PartitionConfig & partition_config, parallel_graph_access & G) {$/;"	f	class:distributed_partitioner	signature:( PartitionConfig & partition_config, parallel_graph_access & G)
distributed_partitioner::perform_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        void perform_partitioning( PartitionConfig & config, parallel_graph_access & G);$/;"	p	class:distributed_partitioner	access:public	signature:( PartitionConfig & config, parallel_graph_access & G)
distributed_partitioner::vcycle	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.cpp	/^void distributed_partitioner::vcycle( PartitionConfig & partition_config, parallel_graph_access & G) {$/;"	f	class:distributed_partitioner	signature:( PartitionConfig & partition_config, parallel_graph_access & G)
distributed_partitioner::vcycle	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        void vcycle( PartitionConfig & config, parallel_graph_access & G );$/;"	p	class:distributed_partitioner	access:private	signature:( PartitionConfig & config, parallel_graph_access & G )
distributed_partitioner::~distributed_partitioner	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.cpp	/^distributed_partitioner::~distributed_partitioner() {$/;"	f	class:distributed_partitioner	signature:()
distributed_partitioner::~distributed_partitioner	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        virtual ~distributed_partitioner();$/;"	p	class:distributed_partitioner	access:public	signature:()
distributed_quality_metrics	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.cpp	/^distributed_quality_metrics::distributed_quality_metrics() {$/;"	f	class:distributed_quality_metrics	signature:()
distributed_quality_metrics	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.h	/^        distributed_quality_metrics();$/;"	p	class:distributed_quality_metrics	access:public	signature:()
distributed_quality_metrics	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.h	/^class distributed_quality_metrics {$/;"	c
distributed_quality_metrics::balance	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.cpp	/^double distributed_quality_metrics::balance( PartitionConfig & config, parallel_graph_access & G ) {$/;"	f	class:distributed_quality_metrics	signature:( PartitionConfig & config, parallel_graph_access & G )
distributed_quality_metrics::balance	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.h	/^        double balance( PartitionConfig & config, parallel_graph_access & G );$/;"	p	class:distributed_quality_metrics	access:public	signature:( PartitionConfig & config, parallel_graph_access & G )
distributed_quality_metrics::balance_second	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.cpp	/^double distributed_quality_metrics::balance_second( PartitionConfig & config, parallel_graph_access & G ) {$/;"	f	class:distributed_quality_metrics	signature:( PartitionConfig & config, parallel_graph_access & G )
distributed_quality_metrics::balance_second	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.h	/^        double balance_second( PartitionConfig & config, parallel_graph_access & G );$/;"	p	class:distributed_quality_metrics	access:public	signature:( PartitionConfig & config, parallel_graph_access & G )
distributed_quality_metrics::distributed_quality_metrics	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.cpp	/^distributed_quality_metrics::distributed_quality_metrics() {$/;"	f	class:distributed_quality_metrics	signature:()
distributed_quality_metrics::distributed_quality_metrics	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.h	/^        distributed_quality_metrics();$/;"	p	class:distributed_quality_metrics	access:public	signature:()
distributed_quality_metrics::edge_cut	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.cpp	/^EdgeWeight distributed_quality_metrics::edge_cut( parallel_graph_access & G ) {$/;"	f	class:distributed_quality_metrics	signature:( parallel_graph_access & G )
distributed_quality_metrics::edge_cut	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.h	/^        EdgeWeight edge_cut( parallel_graph_access & G );$/;"	p	class:distributed_quality_metrics	access:public	signature:( parallel_graph_access & G )
distributed_quality_metrics::edge_cut_second	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.cpp	/^EdgeWeight distributed_quality_metrics::edge_cut_second( parallel_graph_access & G ) {$/;"	f	class:distributed_quality_metrics	signature:( parallel_graph_access & G )
distributed_quality_metrics::edge_cut_second	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.h	/^        EdgeWeight edge_cut_second( parallel_graph_access & G );$/;"	p	class:distributed_quality_metrics	access:public	signature:( parallel_graph_access & G )
distributed_quality_metrics::local_edge_cut	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.cpp	/^EdgeWeight distributed_quality_metrics::local_edge_cut( parallel_graph_access & G, int* partition_map ) {$/;"	f	class:distributed_quality_metrics	signature:( parallel_graph_access & G, int* partition_map )
distributed_quality_metrics::local_edge_cut	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.h	/^        EdgeWeight local_edge_cut( parallel_graph_access & G, int * partition_map );$/;"	p	class:distributed_quality_metrics	access:public	signature:( parallel_graph_access & G, int * partition_map )
distributed_quality_metrics::local_max_block_weight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.cpp	/^NodeWeight distributed_quality_metrics::local_max_block_weight( PartitionConfig & config, parallel_graph_access & G, int * partition_map ) {$/;"	f	class:distributed_quality_metrics	signature:( PartitionConfig & config, parallel_graph_access & G, int * partition_map )
distributed_quality_metrics::local_max_block_weight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.h	/^        NodeWeight local_max_block_weight( PartitionConfig & config, parallel_graph_access & G, int * partition_map );$/;"	p	class:distributed_quality_metrics	access:public	signature:( PartitionConfig & config, parallel_graph_access & G, int * partition_map )
distributed_quality_metrics::~distributed_quality_metrics	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.cpp	/^distributed_quality_metrics::~distributed_quality_metrics() {$/;"	f	class:distributed_quality_metrics	signature:()
distributed_quality_metrics::~distributed_quality_metrics	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.h	/^        virtual ~distributed_quality_metrics();$/;"	p	class:distributed_quality_metrics	access:public	signature:()
dummy_operations	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/dummy_operations.cpp	/^dummy_operations::dummy_operations() {$/;"	f	class:dummy_operations	signature:()
dummy_operations	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/dummy_operations.h	/^        dummy_operations();$/;"	p	class:dummy_operations	access:public	signature:()
dummy_operations	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/dummy_operations.h	/^class dummy_operations {$/;"	c
dummy_operations::dummy_operations	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/dummy_operations.cpp	/^dummy_operations::dummy_operations() {$/;"	f	class:dummy_operations	signature:()
dummy_operations::dummy_operations	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/dummy_operations.h	/^        dummy_operations();$/;"	p	class:dummy_operations	access:public	signature:()
dummy_operations::run_collective_dummy_operations	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/dummy_operations.cpp	/^void dummy_operations::run_collective_dummy_operations() {$/;"	f	class:dummy_operations	signature:()
dummy_operations::run_collective_dummy_operations	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/dummy_operations.h	/^        void run_collective_dummy_operations();$/;"	p	class:dummy_operations	access:public	signature:()
dummy_operations::~dummy_operations	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/dummy_operations.cpp	/^dummy_operations::~dummy_operations() {$/;"	f	class:dummy_operations	signature:()
dummy_operations::~dummy_operations	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/dummy_operations.h	/^        virtual ~dummy_operations();$/;"	p	class:dummy_operations	access:public	signature:()
dump_mrg	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^void dump_mrg(FILE* out, const mrg_transition_matrix* m) {$/;"	f	signature:(FILE* out, const mrg_transition_matrix* m)
dump_mrg_powers	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^void dump_mrg_powers(void) {$/;"	f	signature:(void)
dval	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   double *dval;            \/* Array of parsed argument values *\/$/;"	m	struct:arg_dbl	access:public
e	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        EdgeID e;    \/\/current edge that is constructed$/;"	m	class:parallel_graph_access	access:private
eco	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	/^                void eco( PartitionConfig & config );$/;"	p	class:configuration	access:public	signature:( PartitionConfig & config )
eco	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	/^inline void configuration::eco( PartitionConfig & partition_config ) {$/;"	f	class:configuration	signature:( PartitionConfig & partition_config )
edge_cut	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.cpp	/^EdgeWeight distributed_quality_metrics::edge_cut( parallel_graph_access & G ) {$/;"	f	class:distributed_quality_metrics	signature:( parallel_graph_access & G )
edge_cut	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.h	/^        EdgeWeight edge_cut( parallel_graph_access & G );$/;"	p	class:distributed_quality_metrics	access:public	signature:( parallel_graph_access & G )
edge_cut_second	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.cpp	/^EdgeWeight distributed_quality_metrics::edge_cut_second( parallel_graph_access & G ) {$/;"	f	class:distributed_quality_metrics	signature:( parallel_graph_access & G )
edge_cut_second	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.h	/^        EdgeWeight edge_cut_second( parallel_graph_access & G );$/;"	p	class:distributed_quality_metrics	access:public	signature:( parallel_graph_access & G )
edge_factor	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        long edge_factor;$/;"	m	struct:PartitionConfig	access:public
elapsed	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/timer.h	/^                double elapsed() { $/;"	f	class:timer	access:public	signature:()
endfor	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	65;"	d
epsilon	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        unsigned epsilon;$/;"	m	struct:PartitionConfig	access:public
error	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   int *error;              \/* Array of error codes *\/$/;"	m	struct:arg_end	access:public
errorfn	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   arg_errorfn *errorfn;     \/* Pointer to parent arg_xxx error function *\/$/;"	m	struct:arg_hdr	access:public
evolutionary_time_limit	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        int evolutionary_time_limit;$/;"	m	struct:PartitionConfig	access:public
extension	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   const char **extension;  \/* Array of parsed extensions (eg: bar) *\/$/;"	m	struct:arg_file	access:public
fast	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	/^                void fast( PartitionConfig & config );$/;"	p	class:configuration	access:public	signature:( PartitionConfig & config )
fast	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	/^inline void configuration::fast( PartitionConfig & partition_config ) {$/;"	f	class:configuration	signature:( PartitionConfig & partition_config )
filename	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   const char **filename;   \/* Array of parsed filenames  (eg: \/home\/foo.bar) *\/$/;"	m	struct:arg_file	access:public
filter_duplicates	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/helpers.h	/^        void filter_duplicates( std::vector< vectortype > & input, Compare comparator_function, Equal equal_function);$/;"	p	class:helpers	access:public	signature:( std::vector< vectortype > & input, Compare comparator_function, Equal equal_function)
filter_duplicates	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/helpers.h	/^void helpers::filter_duplicates( std::vector< vectortype > & input, Compare comparator_function, Equal equal_function) {$/;"	f	class:helpers	signature:( std::vector< vectortype > & input, Compare comparator_function, Equal equal_function)
finish_construction	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void finish_construction() {$/;"	f	class:parallel_graph_access	access:public	signature:()
firstEdge	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^    EdgeID firstEdge;$/;"	m	struct:Node	access:public
flag	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   char         flag;        \/* Modifier flags: ARG_TERMINATOR, ARG_HASVALUE. *\/$/;"	m	struct:arg_hdr	access:public
forall_ghost_nodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	62;"	d
forall_local_edges	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	63;"	d
forall_local_nodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	61;"	d
forall_out_edges	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	64;"	d
format	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   const char *format;      \/* strptime format string used to parse the date *\/$/;"	m	struct:arg_date	access:public
from	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID from; \/\/ each process stores nodes [from. to]$/;"	m	class:parallel_graph_access	access:private
generate_4way_bernoulli	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.c	/^static int generate_4way_bernoulli(mrg_state* st, int level, int nlevels) {$/;"	f	file:	signature:(mrg_state* st, int level, int nlevels)
generate_g500_edgelist	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_g500_edgelist.cpp	/^generate_g500_edgelist::generate_g500_edgelist() {$/;"	f	class:generate_g500_edgelist	signature:()
generate_g500_edgelist	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_g500_edgelist.h	/^        generate_g500_edgelist();$/;"	p	class:generate_g500_edgelist	access:public	signature:()
generate_g500_edgelist	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_g500_edgelist.h	/^class generate_g500_edgelist {$/;"	c
generate_g500_edgelist::generate_g500_edgelist	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_g500_edgelist.cpp	/^generate_g500_edgelist::generate_g500_edgelist() {$/;"	f	class:generate_g500_edgelist	signature:()
generate_g500_edgelist::generate_g500_edgelist	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_g500_edgelist.h	/^        generate_g500_edgelist();$/;"	p	class:generate_g500_edgelist	access:public	signature:()
generate_g500_edgelist::generate_kronecker_edgelist	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_g500_edgelist.cpp	/^void generate_g500_edgelist::generate_kronecker_edgelist( PartitionConfig & config, $/;"	f	class:generate_g500_edgelist	signature:( PartitionConfig & config, std::vector< source_target_pair > & edge_list )
generate_g500_edgelist::generate_kronecker_edgelist	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_g500_edgelist.h	/^        void generate_kronecker_edgelist( PartitionConfig & config, $/;"	p	class:generate_g500_edgelist	access:public	signature:( PartitionConfig & config, std::vector< source_target_pair > & edge_list )
generate_g500_edgelist::~generate_g500_edgelist	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_g500_edgelist.cpp	/^generate_g500_edgelist::~generate_g500_edgelist() {$/;"	f	class:generate_g500_edgelist	signature:()
generate_g500_edgelist::~generate_g500_edgelist	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_g500_edgelist.h	/^        virtual ~generate_g500_edgelist();$/;"	p	class:generate_g500_edgelist	access:public	signature:()
generate_kronecker	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_kronecker.cpp	/^generate_kronecker::generate_kronecker() {$/;"	f	class:generate_kronecker	signature:()
generate_kronecker	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_kronecker.h	/^        generate_kronecker();$/;"	p	class:generate_kronecker	access:public	signature:()
generate_kronecker	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_kronecker.h	/^class generate_kronecker {$/;"	c
generate_kronecker	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        bool generate_kronecker;$/;"	m	struct:PartitionConfig	access:public
generate_kronecker::generate_kronecker	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_kronecker.cpp	/^generate_kronecker::generate_kronecker() {$/;"	f	class:generate_kronecker	signature:()
generate_kronecker::generate_kronecker	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_kronecker.h	/^        generate_kronecker();$/;"	p	class:generate_kronecker	access:public	signature:()
generate_kronecker::generate_kronecker_graph	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_kronecker.cpp	/^void generate_kronecker::generate_kronecker_graph( PartitionConfig & config, parallel_graph_access & G) {$/;"	f	class:generate_kronecker	signature:( PartitionConfig & config, parallel_graph_access & G)
generate_kronecker::generate_kronecker_graph	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_kronecker.h	/^        void generate_kronecker_graph( PartitionConfig & config, parallel_graph_access & G);$/;"	p	class:generate_kronecker	access:public	signature:( PartitionConfig & config, parallel_graph_access & G)
generate_kronecker::~generate_kronecker	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_kronecker.cpp	/^generate_kronecker::~generate_kronecker() {$/;"	f	class:generate_kronecker	signature:()
generate_kronecker::~generate_kronecker	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_kronecker.h	/^        virtual ~generate_kronecker();$/;"	p	class:generate_kronecker	access:public	signature:()
generate_kronecker_edgelist	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_g500_edgelist.cpp	/^void generate_g500_edgelist::generate_kronecker_edgelist( PartitionConfig & config, $/;"	f	class:generate_g500_edgelist	signature:( PartitionConfig & config, std::vector< source_target_pair > & edge_list )
generate_kronecker_edgelist	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_g500_edgelist.h	/^        void generate_kronecker_edgelist( PartitionConfig & config, $/;"	p	class:generate_g500_edgelist	access:public	signature:( PartitionConfig & config, std::vector< source_target_pair > & edge_list )
generate_kronecker_graph	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_kronecker.cpp	/^void generate_kronecker::generate_kronecker_graph( PartitionConfig & config, parallel_graph_access & G) {$/;"	f	class:generate_kronecker	signature:( PartitionConfig & config, parallel_graph_access & G)
generate_kronecker_graph	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_kronecker.h	/^        void generate_kronecker_graph( PartitionConfig & config, parallel_graph_access & G);$/;"	p	class:generate_kronecker	access:public	signature:( PartitionConfig & config, parallel_graph_access & G)
generate_kronecker_range	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.c	/^void generate_kronecker_range($/;"	f	signature:( const uint_fast32_t seed[5] , int logN , int64_t start_edge, int64_t end_edge, packed_edge* edges)
generate_kronecker_range	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.h	/^void generate_kronecker_range($/;"	p	signature:( const uint_fast32_t seed[5] , int logN , int64_t start_edge, int64_t end_edge , packed_edge* edges )
generate_random_choices	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.cpp	/^void distributed_partitioner::generate_random_choices( PartitionConfig & config ){$/;"	f	class:distributed_partitioner	signature:( PartitionConfig & config )
generate_random_choices	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        static void generate_random_choices( PartitionConfig & config ) ;$/;"	p	class:distributed_partitioner	access:public	signature:( PartitionConfig & config )
getBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.h	/^        virtual NodeWeight getBlockSize( PartitionID block ) = 0;$/;"	p	class:balance_management	access:public	signature:( PartitionID block )
getBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.h	/^        virtual NodeWeight getBlockSize( PartitionID block );$/;"	p	class:balance_management_coarsening	access:public	signature:( PartitionID block )
getBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.h	/^NodeWeight balance_management_coarsening::getBlockSize( PartitionID block ) {$/;"	f	class:balance_management_coarsening	signature:( PartitionID block )
getBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.h	/^        virtual NodeWeight getBlockSize( PartitionID block );$/;"	p	class:balance_management_refinement	access:public	signature:( PartitionID block )
getBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.h	/^NodeWeight balance_management_refinement::getBlockSize( PartitionID block ) {$/;"	f	class:balance_management_refinement	signature:( PartitionID block )
getBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeWeight getBlockSize( PartitionID block );$/;"	p	class:parallel_graph_access	access:public	signature:( PartitionID block )
getBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^NodeWeight parallel_graph_access::getBlockSize( PartitionID block ) {$/;"	f	class:parallel_graph_access	signature:( PartitionID block )
getCNode	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID getCNode( NodeID node ) {$/;"	f	class:parallel_graph_access	access:public	signature:( NodeID node )
getEdgeTarget	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID getEdgeTarget(EdgeID e);$/;"	p	class:parallel_graph_access	access:public	signature:(EdgeID e)
getEdgeTarget	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline NodeID parallel_graph_access::getEdgeTarget(EdgeID e){$/;"	f	class:parallel_graph_access	signature:(EdgeID e)
getEdgeWeight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        EdgeWeight getEdgeWeight(EdgeID e); $/;"	p	class:parallel_graph_access	access:public	signature:(EdgeID e)
getEdgeWeight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline EdgeWeight parallel_graph_access::getEdgeWeight(EdgeID e) {$/;"	f	class:parallel_graph_access	signature:(EdgeID e)
getGlobalID	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        PEID getGlobalID(NodeID node);$/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node)
getGlobalID	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline PEID parallel_graph_access::getGlobalID(NodeID node) {$/;"	f	class:parallel_graph_access	signature:(NodeID node)
getLocalID	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID getLocalID(NodeID node) {$/;"	f	class:parallel_graph_access	access:public	signature:(NodeID node)
getNodeDegree	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        EdgeID getNodeDegree(NodeID node);$/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node)
getNodeDegree	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline EdgeID parallel_graph_access::getNodeDegree(NodeID node) {$/;"	f	class:parallel_graph_access	signature:(NodeID node)
getNodeLabel	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID getNodeLabel(NodeID node); $/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node)
getNodeLabel	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline EdgeID parallel_graph_access::getNodeLabel(NodeID node) {$/;"	f	class:parallel_graph_access	signature:(NodeID node)
getNodeNumGhostNodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        EdgeID getNodeNumGhostNodes(NodeID node);$/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node)
getNodeNumGhostNodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline EdgeID parallel_graph_access::getNodeNumGhostNodes(NodeID node) {$/;"	f	class:parallel_graph_access	signature:(NodeID node)
getNodeWeight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeWeight getNodeWeight(NodeID node); $/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node)
getNodeWeight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline NodeWeight parallel_graph_access::getNodeWeight(NodeID node) {$/;"	f	class:parallel_graph_access	signature:(NodeID node)
getNumberOfAdjacentPEs	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        PEID getNumberOfAdjacentPEs() {$/;"	f	class:ghost_node_communication	access:public	signature:()
getNumberOfAdjacentPEs	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        PEID getNumberOfAdjacentPEs() {$/;"	f	class:parallel_graph_access	access:public	signature:()
getSecondPartitionIndex	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID getSecondPartitionIndex(NodeID node); $/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node)
getSecondPartitionIndex	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^NodeID parallel_graph_access::getSecondPartitionIndex(NodeID node) {$/;"	f	class:parallel_graph_access	signature:(NodeID node)
getTargetPE	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        PEID getTargetPE(NodeID node);$/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node)
getTargetPE	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline PEID parallel_graph_access::getTargetPE(NodeID node) {$/;"	f	class:parallel_graph_access	signature:(NodeID node)
get_first_edge	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        EdgeID get_first_edge(NodeID node);$/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node)
get_first_edge	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline EdgeID parallel_graph_access::get_first_edge(NodeID node) {$/;"	f	class:parallel_graph_access	signature:(NodeID node)
get_first_invalid_edge	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        EdgeID get_first_invalid_edge(NodeID node);$/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node)
get_first_invalid_edge	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline EdgeID parallel_graph_access::get_first_invalid_edge(NodeID node) {$/;"	f	class:parallel_graph_access	signature:(NodeID node)
get_nodes_to_cnodes_ghost_nodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.cpp	/^void parallel_contraction::get_nodes_to_cnodes_ghost_nodes( parallel_graph_access & G ) {$/;"	f	class:parallel_contraction	signature:( parallel_graph_access & G )
get_nodes_to_cnodes_ghost_nodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.h	/^        void get_nodes_to_cnodes_ghost_nodes( parallel_graph_access & G );   $/;"	p	class:parallel_contraction	access:private	signature:( parallel_graph_access & G )
get_v0_from_edge	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.h	/^static inline int64_t get_v0_from_edge(const packed_edge* p) {$/;"	f	signature:(const packed_edge* p)
get_v1_from_edge	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.h	/^static inline int64_t get_v1_from_edge(const packed_edge* p) {$/;"	f	signature:(const packed_edge* p)
ghost_node_communication	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        ghost_node_communication() : m_iteration_counter(0), m_first_send(true) {$/;"	f	class:ghost_node_communication	access:public	signature:()
ghost_node_communication	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^class ghost_node_communication {$/;"	c
ghost_node_communication::addLabel	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void addLabel(NodeID node, NodeID label);$/;"	p	class:ghost_node_communication	access:public	signature:(NodeID node, NodeID label)
ghost_node_communication::addLabel	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^void ghost_node_communication::addLabel(NodeID node, NodeID label) {$/;"	f	class:ghost_node_communication	signature:(NodeID node, NodeID label)
ghost_node_communication::add_adjacent_processor	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void add_adjacent_processor( PEID peID) {$/;"	f	class:ghost_node_communication	access:public	signature:( PEID peID)
ghost_node_communication::getNumberOfAdjacentPEs	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        PEID getNumberOfAdjacentPEs() {$/;"	f	class:ghost_node_communication	access:public	signature:()
ghost_node_communication::ghost_node_communication	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        ghost_node_communication() : m_iteration_counter(0), m_first_send(true) {$/;"	f	class:ghost_node_communication	access:public	signature:()
ghost_node_communication::init	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void init( ) {$/;"	f	class:ghost_node_communication	access:public	signature:( )
ghost_node_communication::is_adjacent_PE	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        bool is_adjacent_PE(PEID peID) {$/;"	f	class:ghost_node_communication	access:public	signature:(PEID peID)
ghost_node_communication::m_G	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        parallel_graph_access * m_G;$/;"	m	class:ghost_node_communication	access:private
ghost_node_communication::m_PE_packed	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        std::vector< bool >                   m_PE_packed;$/;"	m	class:ghost_node_communication	access:private
ghost_node_communication::m_adjacent_processors	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        std::vector< bool >                   m_adjacent_processors; \/\/ buffers to send messages$/;"	m	class:ghost_node_communication	access:private
ghost_node_communication::m_desired_rounds	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        unsigned long m_desired_rounds;$/;"	m	class:ghost_node_communication	access:private
ghost_node_communication::m_first_send	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        bool m_first_send;$/;"	m	class:ghost_node_communication	access:private
ghost_node_communication::m_isend_requests	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        std::vector< MPI::Request* >          m_isend_requests;$/;"	m	class:ghost_node_communication	access:private
ghost_node_communication::m_iteration_counter	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID m_iteration_counter; \/\/ this counter is used to manage the communication rounds$/;"	m	class:ghost_node_communication	access:private
ghost_node_communication::m_num_adjacent	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        PEID m_num_adjacent; $/;"	m	class:ghost_node_communication	access:private
ghost_node_communication::m_rank	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        PEID m_rank;$/;"	m	class:ghost_node_communication	access:private
ghost_node_communication::m_recv_iteration	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        unsigned long m_recv_iteration;$/;"	m	class:ghost_node_communication	access:private
ghost_node_communication::m_recv_tag	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        unsigned long m_recv_tag;$/;"	m	class:ghost_node_communication	access:private
ghost_node_communication::m_send_buffers_A	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        std::vector< std::vector< NodeID > >  m_send_buffers_A; \/\/ buffers to send messages$/;"	m	class:ghost_node_communication	access:private
ghost_node_communication::m_send_buffers_B	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        std::vector< std::vector< NodeID > >  m_send_buffers_B; \/\/ buffers to send messages$/;"	m	class:ghost_node_communication	access:private
ghost_node_communication::m_send_buffers_ptr	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        std::vector< std::vector< NodeID > >* m_send_buffers_ptr; \/\/ pointer to current buffers to send messages$/;"	m	class:ghost_node_communication	access:private
ghost_node_communication::m_send_iteration	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        unsigned long m_send_iteration;$/;"	m	class:ghost_node_communication	access:private
ghost_node_communication::m_send_tag	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        unsigned long m_send_tag;$/;"	m	class:ghost_node_communication	access:private
ghost_node_communication::m_size	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        PEID m_size;$/;"	m	class:ghost_node_communication	access:private
ghost_node_communication::m_skip_limit	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        unsigned long m_skip_limit; $/;"	m	class:ghost_node_communication	access:private
ghost_node_communication::receive_messages_of_neighbors	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void receive_messages_of_neighbors();$/;"	p	class:ghost_node_communication	access:private	signature:()
ghost_node_communication::receive_messages_of_neighbors	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^void ghost_node_communication::receive_messages_of_neighbors() {$/;"	f	class:ghost_node_communication	signature:()
ghost_node_communication::setGraphReference	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void setGraphReference( parallel_graph_access * G ) {$/;"	f	class:ghost_node_communication	access:public	signature:( parallel_graph_access * G )
ghost_node_communication::set_desired_rounds	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void set_desired_rounds( unsigned long desired_rounds) {$/;"	f	class:ghost_node_communication	access:public	signature:( unsigned long desired_rounds)
ghost_node_communication::set_skip_limit	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void set_skip_limit( unsigned long skip_limit ) {$/;"	f	class:ghost_node_communication	access:public	signature:( unsigned long skip_limit )
ghost_node_communication::update_ghost_node_data	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void update_ghost_node_data( bool check_iteration_counter );$/;"	p	class:ghost_node_communication	access:public	signature:( bool check_iteration_counter )
ghost_node_communication::update_ghost_node_data	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline void ghost_node_communication::update_ghost_node_data( bool check_iteration_counter ) {$/;"	f	class:ghost_node_communication	signature:( bool check_iteration_counter )
ghost_node_communication::update_ghost_node_data_finish	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void update_ghost_node_data_finish();$/;"	p	class:ghost_node_communication	access:public	signature:()
ghost_node_communication::update_ghost_node_data_finish	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline void ghost_node_communication::update_ghost_node_data_finish() {$/;"	f	class:ghost_node_communication	signature:()
ghost_node_communication::update_ghost_node_data_global	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void update_ghost_node_data_global();$/;"	p	class:ghost_node_communication	access:public	signature:()
ghost_node_communication::update_ghost_node_data_global	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline void ghost_node_communication::update_ghost_node_data_global() {$/;"	f	class:ghost_node_communication	signature:()
ghost_node_communication::~ghost_node_communication	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        virtual ~ghost_node_communication() {};$/;"	f	class:ghost_node_communication	access:public	signature:()
globalID	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^    NodeID globalID:49;$/;"	m	struct:AdditionalNonLocalNodeData	access:public
glossary	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   const char  *glossary;    \/* Description of the option as shown by arg_print_glossary function *\/$/;"	m	struct:arg_hdr	access:public
graph_filename	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        std::string graph_filename;$/;"	m	struct:PartitionConfig	access:public
hash_hashed_edge	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/hashed_graph.h	/^struct hash_hashed_edge {$/;"	s
hash_hashed_edge::operator ()	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/hashed_graph.h	/^       unsigned long operator()(const hashed_edge e) const {$/;"	f	struct:hash_hashed_edge	access:public	signature:(const hashed_edge e) const
hashed_edge	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/hashed_graph.h	/^struct hashed_edge {$/;"	s
hashed_edge::k	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/hashed_graph.h	/^        NodeID k;$/;"	m	struct:hashed_edge	access:public
hashed_edge::source	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/hashed_graph.h	/^        NodeID source;$/;"	m	struct:hashed_edge	access:public
hashed_edge::target	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/hashed_graph.h	/^        NodeID target;$/;"	m	struct:hashed_edge	access:public
hashed_graph	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/hashed_graph.h	/^typedef std::unordered_map<const hashed_edge, data_hashed_edge, hash_hashed_edge, compare_hashed_edge> hashed_graph;$/;"	t
hdr	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   struct arg_hdr hdr;      \/* The mandatory argtable header struct *\/$/;"	m	struct:arg_date	typeref:struct:arg_date::arg_hdr	access:public
hdr	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   struct arg_hdr hdr;      \/* The mandatory argtable header struct *\/$/;"	m	struct:arg_dbl	typeref:struct:arg_dbl::arg_hdr	access:public
hdr	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   struct arg_hdr hdr;      \/* The mandatory argtable header struct *\/$/;"	m	struct:arg_end	typeref:struct:arg_end::arg_hdr	access:public
hdr	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   struct arg_hdr hdr;      \/* The mandatory argtable header struct *\/$/;"	m	struct:arg_file	typeref:struct:arg_file::arg_hdr	access:public
hdr	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   struct arg_hdr hdr;      \/* The mandatory argtable header struct *\/$/;"	m	struct:arg_int	typeref:struct:arg_int::arg_hdr	access:public
hdr	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   struct arg_hdr hdr;      \/* The mandatory argtable header struct *\/$/;"	m	struct:arg_lit	typeref:struct:arg_lit::arg_hdr	access:public
hdr	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   struct arg_hdr hdr;      \/* The mandatory argtable header struct *\/$/;"	m	struct:arg_rem	typeref:struct:arg_rem::arg_hdr	access:public
hdr	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   struct arg_hdr hdr;      \/* The mandatory argtable header struct *\/$/;"	m	struct:arg_rex	typeref:struct:arg_rex::arg_hdr	access:public
hdr	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   struct arg_hdr hdr;      \/* The mandatory argtable header struct *\/$/;"	m	struct:arg_str	typeref:struct:arg_str::arg_hdr	access:public
helpers	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/helpers.h	/^        helpers() {};$/;"	f	class:helpers	access:public	signature:()
helpers	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/helpers.h	/^class helpers {$/;"	c
helpers::filter_duplicates	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/helpers.h	/^        void filter_duplicates( std::vector< vectortype > & input, Compare comparator_function, Equal equal_function);$/;"	p	class:helpers	access:public	signature:( std::vector< vectortype > & input, Compare comparator_function, Equal equal_function)
helpers::filter_duplicates	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/helpers.h	/^void helpers::filter_duplicates( std::vector< vectortype > & input, Compare comparator_function, Equal equal_function) {$/;"	f	class:helpers	signature:( std::vector< vectortype > & input, Compare comparator_function, Equal equal_function)
helpers::helpers	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/helpers.h	/^        helpers() {};$/;"	f	class:helpers	access:public	signature:()
helpers::~helpers	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/helpers.h	/^        virtual ~helpers() {};$/;"	f	class:helpers	access:public	signature:()
high	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.h	/^  uint32_t high; \/* v1 in high half, v0 in low half *\/$/;"	m	struct:packed_edge	access:public
inbalance	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        unsigned inbalance;$/;"	m	struct:PartitionConfig	access:public
init	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.h	/^        virtual void init() = 0;$/;"	p	class:balance_management	access:public	signature:()
init	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.cpp	/^void balance_management_coarsening::init(  ) {$/;"	f	class:balance_management_coarsening	signature:( )
init	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.h	/^        virtual void init();$/;"	p	class:balance_management_coarsening	access:public	signature:()
init	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.cpp	/^void balance_management_refinement::init() {$/;"	f	class:balance_management_refinement	signature:()
init	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.h	/^        virtual void init();$/;"	p	class:balance_management_refinement	access:public	signature:()
init	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void init( ) {$/;"	f	class:ghost_node_communication	access:public	signature:( )
init_balance_management	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.cpp	/^void parallel_graph_access::init_balance_management( PartitionConfig & config ) {$/;"	f	class:parallel_graph_access	signature:( PartitionConfig & config )
init_balance_management	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void init_balance_management( PartitionConfig & config );$/;"	p	class:parallel_graph_access	access:public	signature:( PartitionConfig & config )
initial_assignment	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_projection.cpp	/^void parallel_projection::initial_assignment( parallel_graph_access & G, complete_graph_access & Q) {$/;"	f	class:parallel_projection	signature:( parallel_graph_access & G, complete_graph_access & Q)
initial_assignment	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_projection.h	/^        void initial_assignment( parallel_graph_access & G, complete_graph_access & Q);$/;"	p	class:parallel_projection	access:public	signature:( parallel_graph_access & G, complete_graph_access & Q)
initial_partitioning_algorithm	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/initial_partitioning.cpp	/^initial_partitioning_algorithm::initial_partitioning_algorithm() {$/;"	f	class:initial_partitioning_algorithm	signature:()
initial_partitioning_algorithm	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/initial_partitioning.h	/^        initial_partitioning_algorithm();$/;"	p	class:initial_partitioning_algorithm	access:public	signature:()
initial_partitioning_algorithm	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/initial_partitioning.h	/^class initial_partitioning_algorithm {$/;"	c
initial_partitioning_algorithm	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        InitialPartitioningAlgorithm initial_partitioning_algorithm;$/;"	m	struct:PartitionConfig	access:public
initial_partitioning_algorithm::initial_partitioning_algorithm	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/initial_partitioning.cpp	/^initial_partitioning_algorithm::initial_partitioning_algorithm() {$/;"	f	class:initial_partitioning_algorithm	signature:()
initial_partitioning_algorithm::initial_partitioning_algorithm	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/initial_partitioning.h	/^        initial_partitioning_algorithm();$/;"	p	class:initial_partitioning_algorithm	access:public	signature:()
initial_partitioning_algorithm::perform_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/initial_partitioning.cpp	/^void initial_partitioning_algorithm::perform_partitioning( PartitionConfig & config, parallel_graph_access & Q) {$/;"	f	class:initial_partitioning_algorithm	signature:( PartitionConfig & config, parallel_graph_access & Q)
initial_partitioning_algorithm::perform_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/initial_partitioning.h	/^        void perform_partitioning( PartitionConfig & config, parallel_graph_access & G);$/;"	p	class:initial_partitioning_algorithm	access:public	signature:( PartitionConfig & config, parallel_graph_access & G)
initial_partitioning_algorithm::~initial_partitioning_algorithm	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/initial_partitioning.cpp	/^initial_partitioning_algorithm::~initial_partitioning_algorithm() {$/;"	f	class:initial_partitioning_algorithm	signature:()
initial_partitioning_algorithm::~initial_partitioning_algorithm	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/initial_partitioning.h	/^        virtual ~initial_partitioning_algorithm();$/;"	p	class:initial_partitioning_algorithm	access:public	signature:()
input_partition	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        std::string input_partition;$/;"	m	struct:PartitionConfig	access:public
is_adjacent_PE	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        bool is_adjacent_PE(PEID peID) {$/;"	f	class:ghost_node_communication	access:public	signature:(PEID peID)
is_adjacent_PE	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        bool is_adjacent_PE(PEID peID) {$/;"	f	class:parallel_graph_access	access:public	signature:(PEID peID)
is_interface_node	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        bool is_interface_node(NodeID node);$/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node)
is_interface_node	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^    bool       is_interface_node:1; \/\/ save a little bit of memory$/;"	m	struct:NodeData	access:public
is_interface_node	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline bool parallel_graph_access::is_interface_node(NodeID node) {$/;"	f	class:parallel_graph_access	signature:(NodeID node)
is_local_node	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        bool is_local_node(NodeID node);$/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node)
is_local_node	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline bool parallel_graph_access::is_local_node(NodeID node) {$/;"	f	class:parallel_graph_access	signature:(NodeID node)
is_local_node_from_global_id	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        bool is_local_node_from_global_id(NodeID node);$/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node)
is_local_node_from_global_id	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline bool parallel_graph_access::is_local_node_from_global_id(NodeID node) {$/;"	f	class:parallel_graph_access	signature:(NodeID node)
ival	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   int *ival;               \/* Array of parsed argument values *\/$/;"	m	struct:arg_int	access:public
k	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/hashed_graph.h	/^        NodeID k;$/;"	m	struct:hashed_edge	access:public
k	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        PartitionID k;$/;"	m	struct:PartitionConfig	access:public
kaffpa	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/kaHIP_lib/kaHIP_interface.h	/^void kaffpa(int* n, int* vwgt, int* xadj, $/;"	p	signature:(int* n, int* vwgt, int* xadj, int* adjcwgt, int* adjncy, int* nparts, double* imbalance, bool suppress_output, int seed, int mode, int* edgecut, int* part)
kaffpaE	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/kaHIP_lib/kaHIP_interface.h	/^void kaffpaE(int* n, int* vwgt, int* xadj, int* adjcwgt, $/;"	p	signature:(int* n, int* vwgt, int* xadj, int* adjcwgt, int* adjncy, int* nparts, double* inbalance, bool suppress_output, bool graph_partitioned, int time_limit, int seed, int mode, int* edgecut, double* balance, int* part)
label	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^    NodeID     label;$/;"	m	struct:NodeData	access:public
label_iterations	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        unsigned int label_iterations;$/;"	m	struct:PartitionConfig	access:public
label_iterations_coarsening	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        unsigned int label_iterations_coarsening;$/;"	m	struct:PartitionConfig	access:public
label_iterations_refinement	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        unsigned int label_iterations_refinement;$/;"	m	struct:PartitionConfig	access:public
local_edge_cut	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.cpp	/^EdgeWeight distributed_quality_metrics::local_edge_cut( parallel_graph_access & G, int* partition_map ) {$/;"	f	class:distributed_quality_metrics	signature:( parallel_graph_access & G, int* partition_map )
local_edge_cut	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.h	/^        EdgeWeight local_edge_cut( parallel_graph_access & G, int * partition_map );$/;"	p	class:distributed_quality_metrics	access:public	signature:( parallel_graph_access & G, int * partition_map )
local_max_block_weight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.cpp	/^NodeWeight distributed_quality_metrics::local_max_block_weight( PartitionConfig & config, parallel_graph_access & G, int * partition_map ) {$/;"	f	class:distributed_quality_metrics	signature:( PartitionConfig & config, parallel_graph_access & G, int * partition_map )
local_max_block_weight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.h	/^        NodeWeight local_max_block_weight( PartitionConfig & config, parallel_graph_access & G, int * partition_map );$/;"	p	class:distributed_quality_metrics	access:public	signature:( PartitionConfig & config, parallel_graph_access & G, int * partition_map )
local_target	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^    NodeID     local_target;$/;"	m	struct:Edge	access:public
log_num_verts	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        int log_num_verts;$/;"	m	struct:PartitionConfig	access:public
longopts	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   const char  *longopts;    \/* String defiing the long options *\/$/;"	m	struct:arg_hdr	access:public
m_G	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.h	/^        parallel_graph_access * m_G;$/;"	m	class:balance_management	access:protected
m_G	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        parallel_graph_access * m_G;$/;"	m	class:ghost_node_communication	access:private
m_PE_packed	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        std::vector< bool >                   m_PE_packed;$/;"	m	class:ghost_node_communication	access:private
m_add_non_local_node_data	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        std::vector<AdditionalNonLocalNodeData> m_add_non_local_node_data;$/;"	m	class:parallel_graph_access	access:private
m_adjacent_processors	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        std::vector< bool >                   m_adjacent_processors; \/\/ buffers to send messages$/;"	m	class:ghost_node_communication	access:private
m_bm	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        balance_management* m_bm;$/;"	m	class:parallel_graph_access	access:private
m_building_graph	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        bool   m_building_graph;$/;"	m	class:parallel_graph_access	access:private
m_cf	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.cpp	/^std::vector< NodeID > distributed_partitioner::m_cf = std::vector< NodeID >();$/;"	m	class:distributed_partitioner	file:
m_cf	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        static std::vector< NodeID > m_cf;$/;"	m	class:distributed_partitioner	access:private
m_comm_rounds	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.cpp	/^unsigned long parallel_graph_access::m_comm_rounds = 128; $/;"	m	class:parallel_graph_access	file:
m_comm_rounds	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        static unsigned long m_comm_rounds; \/\/ global number of edges$/;"	m	class:parallel_graph_access	access:private
m_comm_rounds_up	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.cpp	/^unsigned long parallel_graph_access::m_comm_rounds_up = 128; $/;"	m	class:parallel_graph_access	file:
m_comm_rounds_up	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        static unsigned long m_comm_rounds_up; \/\/ global number of edges$/;"	m	class:parallel_graph_access	access:private
m_cur_rnd_choice	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        NodeID m_cur_rnd_choice;$/;"	m	class:distributed_partitioner	access:private
m_cycle	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        int m_cycle;$/;"	m	class:distributed_partitioner	access:private
m_desired_rounds	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        unsigned long m_desired_rounds;$/;"	m	class:ghost_node_communication	access:private
m_divisor	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID m_divisor; \/\/ needed to compute the target id of a ghost node$/;"	m	class:parallel_graph_access	access:private
m_edges	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        std::vector<Edge>                       m_edges;$/;"	m	class:parallel_graph_access	access:private
m_first_send	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        bool m_first_send;$/;"	m	class:ghost_node_communication	access:private
m_fuzzy_block_weights	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.h	/^        std::unordered_map< PartitionID, long > m_fuzzy_block_weights;$/;"	m	class:balance_management_coarsening	access:private
m_ghost_adddata_array_offset	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID m_ghost_adddata_array_offset; \/\/ node id of ghost node - offset to get the position in add data  $/;"	m	class:parallel_graph_access	access:private
m_global_m	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID m_global_m; \/\/ global number of edges$/;"	m	class:parallel_graph_access	access:private
m_global_n	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID m_global_n; \/\/ global number of nodes$/;"	m	class:parallel_graph_access	access:private
m_global_to_local_id	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        std::unordered_map<NodeID, NodeID> m_global_to_local_id;$/;"	m	class:parallel_graph_access	access:private
m_gnc	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        ghost_node_communication* m_gnc;$/;"	m	class:parallel_graph_access	access:private
m_isend_requests	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        std::vector< MPI::Request* >          m_isend_requests;$/;"	m	class:ghost_node_communication	access:private
m_iteration_counter	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID m_iteration_counter; \/\/ this counter is used to manage the communication rounds$/;"	m	class:ghost_node_communication	access:private
m_last_source	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID m_last_source;$/;"	m	class:parallel_graph_access	access:private
m_level	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        int m_level;$/;"	m	class:distributed_partitioner	access:private
m_lic	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.cpp	/^std::vector< NodeID > distributed_partitioner::m_lic = std::vector< NodeID >();$/;"	m	class:distributed_partitioner	file:
m_lic	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        static std::vector< NodeID > m_lic;$/;"	m	class:distributed_partitioner	access:private
m_local_block_weights	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.h	/^        std::vector< NodeWeight > m_local_block_weights;$/;"	m	class:balance_management_refinement	access:private
m_messages	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_block_down_propagation.h	/^        std::vector< std::vector< NodeID > > m_messages;$/;"	m	class:parallel_block_down_propagation	access:private
m_messages	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.h	/^        std::vector< std::vector< NodeID > >  m_messages;$/;"	m	class:parallel_contraction	access:private
m_messages	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_projection.h	/^        std::vector< std::vector< NodeID > > m_messages;$/;"	m	class:parallel_projection	access:private
m_mt	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.cpp	/^MersenneTwister random_functions::m_mt;$/;"	m	class:random_functions	file:
m_mt	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                static MersenneTwister m_mt;$/;"	m	class:random_functions	access:private
m_nodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        std::vector<Node>                       m_nodes; $/;"	m	class:parallel_graph_access	access:private
m_nodes_data	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        std::vector<NodeData>                   m_nodes_data;$/;"	m	class:parallel_graph_access	access:private
m_nodes_to_cnode	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        std::vector<NodeID>                     m_nodes_to_cnode; $/;"	m	class:parallel_graph_access	access:private
m_num_adjacent	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        PEID m_num_adjacent; $/;"	m	class:ghost_node_communication	access:private
m_num_ghost_nodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID m_num_ghost_nodes;$/;"	m	class:parallel_graph_access	access:private
m_num_local_nodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID m_num_local_nodes; \/\/ store the number of local \/ non-ghost nodes$/;"	m	class:parallel_graph_access	access:private
m_num_nodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID m_num_nodes; \/\/ TODO naming$/;"	m	class:parallel_graph_access	access:private
m_out_messages	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.h	/^        std::vector< std::vector< NodeID > >  m_out_messages;$/;"	m	class:parallel_contraction	access:private
m_rank	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        PEID m_rank;$/;"	m	class:ghost_node_communication	access:private
m_recv_iteration	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        unsigned long m_recv_iteration;$/;"	m	class:ghost_node_communication	access:private
m_recv_tag	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        unsigned long m_recv_tag;$/;"	m	class:ghost_node_communication	access:private
m_seed	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.cpp	/^int random_functions::m_seed = 0;$/;"	m	class:random_functions	file:
m_seed	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                static int m_seed;$/;"	m	class:random_functions	access:private
m_send_buffers	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_block_down_propagation.h	/^        std::vector< std::vector< NodeID > > m_send_buffers; \/\/ buffers to send messages$/;"	m	class:parallel_block_down_propagation	access:private
m_send_buffers	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.h	/^        std::vector< std::vector< NodeID > >  m_send_buffers; \/\/ buffers to send messages$/;"	m	class:parallel_contraction	access:private
m_send_buffers_A	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        std::vector< std::vector< NodeID > >  m_send_buffers_A; \/\/ buffers to send messages$/;"	m	class:ghost_node_communication	access:private
m_send_buffers_B	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        std::vector< std::vector< NodeID > >  m_send_buffers_B; \/\/ buffers to send messages$/;"	m	class:ghost_node_communication	access:private
m_send_buffers_ptr	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        std::vector< std::vector< NodeID > >* m_send_buffers_ptr; \/\/ pointer to current buffers to send messages$/;"	m	class:ghost_node_communication	access:private
m_send_iteration	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        unsigned long m_send_iteration;$/;"	m	class:ghost_node_communication	access:private
m_send_tag	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        unsigned long m_send_tag;$/;"	m	class:ghost_node_communication	access:private
m_sf	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.cpp	/^std::vector< NodeID > distributed_partitioner::m_sf = std::vector< NodeID >();$/;"	m	class:distributed_partitioner	file:
m_sf	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        static std::vector< NodeID > m_sf;$/;"	m	class:distributed_partitioner	access:private
m_size	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        PEID m_size;$/;"	m	class:ghost_node_communication	access:private
m_skip_limit	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        unsigned long m_skip_limit; $/;"	m	class:ghost_node_communication	access:private
m_start	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/timer.h	/^                double m_start;$/;"	m	class:timer	access:private
m_t	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        timer m_t; $/;"	m	class:distributed_partitioner	access:private
m_total_block_weights	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.h	/^        std::vector< NodeWeight > m_total_block_weights;$/;"	m	class:balance_management_refinement	access:private
m_total_graph_weight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        NodeWeight m_total_graph_weight;$/;"	m	class:distributed_partitioner	access:private
m_total_num_labels	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.h	/^        NodeID  m_total_num_labels;$/;"	m	class:balance_management	access:protected
main	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/edge_list_to_metis_graph.cpp	/^int main(int argn, char **argv)$/;"	f	signature:(int argn, char **argv)
main	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/generate_kronecker.cpp	/^int main(int argn, char **argv) {$/;"	f	signature:(int argn, char **argv)
main	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/parallel_label_compress.cpp	/^int main(int argn, char **argv) {$/;"	f	signature:(int argn, char **argv)
main	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/parallel_label_compress_reps.cpp	/^int main(int argn, char **argv) {$/;"	f	signature:(int argn, char **argv)
main	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/yahoo_to_metis.cpp	/^int main(int argn, char **argv)$/;"	f	signature:(int argn, char **argv)
main	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^int main(int argc, char** argv) {$/;"	f	signature:(int argc, char** argv)
make_graph	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/make_graph.c	/^void make_graph(int log_numverts, int64_t M, uint64_t userseed1, uint64_t userseed2, int64_t* nedges_ptr, packed_edge** result_ptr) {$/;"	f	signature:(int log_numverts, int64_t M, uint64_t userseed1, uint64_t userseed2, int64_t* nedges_ptr, packed_edge** result_ptr)
make_graph	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/make_graph.h	/^void make_graph($/;"	p	signature:( int log_numverts , int64_t desired_nedges , uint64_t userseed1 , uint64_t userseed2 , int64_t* nedges , packed_edge** result )
make_mrg_seed	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/utils.c	/^void make_mrg_seed(uint64_t userseed1, uint64_t userseed2, uint_fast32_t* seed) {$/;"	f	signature:(uint64_t userseed1, uint64_t userseed2, uint_fast32_t* seed)
make_mrg_seed	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/utils.h	/^void make_mrg_seed(uint64_t userseed1, uint64_t userseed2, uint_fast32_t* seed);$/;"	p	signature:(uint64_t userseed1, uint64_t userseed2, uint_fast32_t* seed)
make_one_edge	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.c	/^void make_one_edge(int64_t nverts, int level, int lgN, mrg_state* st, packed_edge* result, uint64_t val0, uint64_t val1) {$/;"	f	file:	signature:(int64_t nverts, int level, int lgN, mrg_state* st, packed_edge* result, uint64_t val0, uint64_t val1)
make_random_numbers	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/make_graph.c	/^void make_random_numbers($/;"	f	signature:( int64_t nvalues , uint64_t userseed1 , uint64_t userseed2 , int64_t position , double* result )
make_random_numbers	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/make_graph.h	/^void make_random_numbers($/;"	p	signature:( int64_t nvalues , uint64_t userseed1 , uint64_t userseed2 , int64_t position , double* result )
maxcount	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   int          maxcount;    \/* Maximum number of occurences if this option accepted *\/$/;"	m	struct:arg_hdr	access:public
mincount	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   int          mincount;    \/* Minimum number of occurences of this option accepted *\/$/;"	m	struct:arg_hdr	access:public
mod_add	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_32bit.h	/^static inline uint_fast32_t mod_add(uint_fast32_t a, uint_fast32_t b) {$/;"	f	signature:(uint_fast32_t a, uint_fast32_t b)
mod_add	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_64bit.h	/^static inline uint_fast32_t mod_add(uint_fast32_t a, uint_fast32_t b) {$/;"	f	signature:(uint_fast32_t a, uint_fast32_t b)
mod_add	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_xmt.h	/^static inline uint_fast32_t mod_add(uint_fast32_t a, uint_fast32_t b) {$/;"	f	signature:(uint_fast32_t a, uint_fast32_t b)
mod_down	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_xmt.h	/^static inline uint_fast64_t mod_down(uint_fast64_t x) {$/;"	f	signature:(uint_fast64_t x)
mod_down	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_xmt.h	/^static inline uint_fast64_t mod_down(uint_fast64_t x);$/;"	p	signature:(uint_fast64_t x)
mod_down_fast	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_xmt.h	/^static inline uint_fast64_t mod_down_fast(uint_fast64_t x) {$/;"	f	signature:(uint_fast64_t x)
mod_mac	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_32bit.h	/^static inline uint_fast32_t mod_mac(uint_fast32_t sum, uint_fast32_t a, uint_fast32_t b) {$/;"	f	signature:(uint_fast32_t sum, uint_fast32_t a, uint_fast32_t b)
mod_mac	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_64bit.h	/^static inline uint_fast32_t mod_mac(uint_fast32_t sum, uint_fast32_t a, uint_fast32_t b) {$/;"	f	signature:(uint_fast32_t sum, uint_fast32_t a, uint_fast32_t b)
mod_mac	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_xmt.h	/^static inline uint_fast32_t mod_mac(uint_fast32_t sum, uint_fast32_t a, uint_fast32_t b) {$/;"	f	signature:(uint_fast32_t sum, uint_fast32_t a, uint_fast32_t b)
mod_mac2	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_32bit.h	/^static inline uint_fast32_t mod_mac2(uint_fast32_t sum, uint_fast32_t a, uint_fast32_t b, uint_fast32_t c, uint_fast32_t d) {$/;"	f	signature:(uint_fast32_t sum, uint_fast32_t a, uint_fast32_t b, uint_fast32_t c, uint_fast32_t d)
mod_mac2	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_64bit.h	/^static inline uint_fast32_t mod_mac2(uint_fast32_t sum, uint_fast32_t a, uint_fast32_t b, uint_fast32_t c, uint_fast32_t d) {$/;"	f	signature:(uint_fast32_t sum, uint_fast32_t a, uint_fast32_t b, uint_fast32_t c, uint_fast32_t d)
mod_mac2	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_xmt.h	/^static inline uint_fast32_t mod_mac2(uint_fast32_t sum, uint_fast32_t a, uint_fast32_t b, uint_fast32_t c, uint_fast32_t d) {$/;"	f	signature:(uint_fast32_t sum, uint_fast32_t a, uint_fast32_t b, uint_fast32_t c, uint_fast32_t d)
mod_mac3	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_32bit.h	/^static inline uint_fast32_t mod_mac3(uint_fast32_t sum, uint_fast32_t a, uint_fast32_t b, uint_fast32_t c, uint_fast32_t d, uint_fast32_t e, uint_fast32_t f) {$/;"	f	signature:(uint_fast32_t sum, uint_fast32_t a, uint_fast32_t b, uint_fast32_t c, uint_fast32_t d, uint_fast32_t e, uint_fast32_t f)
mod_mac3	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_64bit.h	/^static inline uint_fast32_t mod_mac3(uint_fast32_t sum, uint_fast32_t a, uint_fast32_t b, uint_fast32_t c, uint_fast32_t d, uint_fast32_t e, uint_fast32_t f) {$/;"	f	signature:(uint_fast32_t sum, uint_fast32_t a, uint_fast32_t b, uint_fast32_t c, uint_fast32_t d, uint_fast32_t e, uint_fast32_t f)
mod_mac3	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_xmt.h	/^static inline uint_fast32_t mod_mac3(uint_fast32_t sum, uint_fast32_t a, uint_fast32_t b, uint_fast32_t c, uint_fast32_t d, uint_fast32_t e, uint_fast32_t f) {$/;"	f	signature:(uint_fast32_t sum, uint_fast32_t a, uint_fast32_t b, uint_fast32_t c, uint_fast32_t d, uint_fast32_t e, uint_fast32_t f)
mod_mac4	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_32bit.h	/^static inline uint_fast32_t mod_mac4(uint_fast32_t sum, uint_fast32_t a, uint_fast32_t b, uint_fast32_t c, uint_fast32_t d, uint_fast32_t e, uint_fast32_t f, uint_fast32_t g, uint_fast32_t h) {$/;"	f	signature:(uint_fast32_t sum, uint_fast32_t a, uint_fast32_t b, uint_fast32_t c, uint_fast32_t d, uint_fast32_t e, uint_fast32_t f, uint_fast32_t g, uint_fast32_t h)
mod_mac4	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_64bit.h	/^static inline uint_fast32_t mod_mac4(uint_fast32_t sum, uint_fast32_t a, uint_fast32_t b, uint_fast32_t c, uint_fast32_t d, uint_fast32_t e, uint_fast32_t f, uint_fast32_t g, uint_fast32_t h) {$/;"	f	signature:(uint_fast32_t sum, uint_fast32_t a, uint_fast32_t b, uint_fast32_t c, uint_fast32_t d, uint_fast32_t e, uint_fast32_t f, uint_fast32_t g, uint_fast32_t h)
mod_mac4	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_xmt.h	/^static inline uint_fast32_t mod_mac4(uint_fast32_t sum, uint_fast32_t a, uint_fast32_t b, uint_fast32_t c, uint_fast32_t d, uint_fast32_t e, uint_fast32_t f, uint_fast32_t g, uint_fast32_t h) {$/;"	f	signature:(uint_fast32_t sum, uint_fast32_t a, uint_fast32_t b, uint_fast32_t c, uint_fast32_t d, uint_fast32_t e, uint_fast32_t f, uint_fast32_t g, uint_fast32_t h)
mod_mac_y	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_32bit.h	/^inline uint_fast32_t mod_mac_y(uint_fast32_t sum, uint_fast32_t a) {$/;"	f	signature:(uint_fast32_t sum, uint_fast32_t a)
mod_mac_y	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_64bit.h	/^static inline uint_fast32_t mod_mac_y(uint_fast32_t sum, uint_fast32_t a) {$/;"	f	signature:(uint_fast32_t sum, uint_fast32_t a)
mod_mac_y	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_xmt.h	/^static inline uint_fast32_t mod_mac_y(uint_fast32_t sum, uint_fast32_t a) {$/;"	f	signature:(uint_fast32_t sum, uint_fast32_t a)
mod_mul	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_32bit.h	/^static inline uint_fast32_t mod_mul(uint_fast32_t a, uint_fast32_t b) {$/;"	f	signature:(uint_fast32_t a, uint_fast32_t b)
mod_mul	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_64bit.h	/^static inline uint_fast32_t mod_mul(uint_fast32_t a, uint_fast32_t b) {$/;"	f	signature:(uint_fast32_t a, uint_fast32_t b)
mod_mul	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_xmt.h	/^static inline uint_fast32_t mod_mul(uint_fast32_t a, uint_fast32_t b) {$/;"	f	signature:(uint_fast32_t a, uint_fast32_t b)
mod_mul_x	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_32bit.h	/^inline uint_fast32_t mod_mul_x(uint_fast32_t a) {$/;"	f	signature:(uint_fast32_t a)
mod_mul_x	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_64bit.h	/^static inline uint_fast32_t mod_mul_x(uint_fast32_t a) {$/;"	f	signature:(uint_fast32_t a)
mod_mul_x	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_xmt.h	/^static inline uint_fast32_t mod_mul_x(uint_fast32_t a) {$/;"	f	signature:(uint_fast32_t a)
mod_mul_y	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_32bit.h	/^inline uint_fast32_t mod_mul_y(uint_fast32_t a) {$/;"	f	signature:(uint_fast32_t a)
mod_mul_y	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_64bit.h	/^static inline uint_fast32_t mod_mul_y(uint_fast32_t a) {$/;"	f	signature:(uint_fast32_t a)
mod_mul_y	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mod_arith_xmt.h	/^static inline uint_fast32_t mod_mul_y(uint_fast32_t a) {$/;"	f	signature:(uint_fast32_t a)
mpi_tools	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/mpi_tools.cpp	/^mpi_tools::mpi_tools() {$/;"	f	class:mpi_tools	signature:()
mpi_tools	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/mpi_tools.h	/^        mpi_tools();$/;"	p	class:mpi_tools	access:public	signature:()
mpi_tools	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/mpi_tools.h	/^class mpi_tools {$/;"	c
mpi_tools::collect_and_write_labels	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/mpi_tools.cpp	/^void mpi_tools::collect_and_write_labels( PartitionConfig & config, parallel_graph_access & G) {$/;"	f	class:mpi_tools	signature:( PartitionConfig & config, parallel_graph_access & G)
mpi_tools::collect_and_write_labels	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/mpi_tools.h	/^        void collect_and_write_labels( PartitionConfig & config, $/;"	p	class:mpi_tools	access:public	signature:( PartitionConfig & config, parallel_graph_access & G)
mpi_tools::collect_parallel_graph_to_local_graph	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/mpi_tools.cpp	/^void mpi_tools::collect_parallel_graph_to_local_graph( PartitionConfig & config, $/;"	f	class:mpi_tools	signature:( PartitionConfig & config, parallel_graph_access & G, complete_graph_access & Q)
mpi_tools::collect_parallel_graph_to_local_graph	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/mpi_tools.h	/^        void collect_parallel_graph_to_local_graph( PartitionConfig & config, $/;"	p	class:mpi_tools	access:public	signature:( PartitionConfig & config, parallel_graph_access & G, complete_graph_access & Q)
mpi_tools::distribute_local_graph	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/mpi_tools.cpp	/^void mpi_tools::distribute_local_graph( PartitionConfig & config, $/;"	f	class:mpi_tools	signature:( PartitionConfig & config, complete_graph_access & G)
mpi_tools::distribute_local_graph	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/mpi_tools.h	/^        void distribute_local_graph( PartitionConfig & config, complete_graph_access & G);$/;"	p	class:mpi_tools	access:public	signature:( PartitionConfig & config, complete_graph_access & G)
mpi_tools::mpi_tools	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/mpi_tools.cpp	/^mpi_tools::mpi_tools() {$/;"	f	class:mpi_tools	signature:()
mpi_tools::mpi_tools	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/mpi_tools.h	/^        mpi_tools();$/;"	p	class:mpi_tools	access:public	signature:()
mpi_tools::~mpi_tools	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/mpi_tools.cpp	/^mpi_tools::~mpi_tools() {$/;"	f	class:mpi_tools	signature:()
mpi_tools::~mpi_tools	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/mpi_tools.h	/^        virtual ~mpi_tools();$/;"	p	class:mpi_tools	access:public	signature:()
mrg_apply_transition	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^static void mrg_apply_transition(const mrg_transition_matrix* mat, const mrg_state* st, mrg_state* r) {$/;"	f	file:	signature:(const mrg_transition_matrix* mat, const mrg_state* st, mrg_state* r)
mrg_get_double_orig	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^double mrg_get_double_orig(mrg_state* state) {$/;"	f	signature:(mrg_state* state)
mrg_get_double_orig	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.h	/^double mrg_get_double_orig(mrg_state* state);$/;"	p	signature:(mrg_state* state)
mrg_get_uint_orig	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^uint_fast32_t mrg_get_uint_orig(mrg_state* state) {$/;"	f	signature:(mrg_state* state)
mrg_get_uint_orig	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.h	/^uint_fast32_t mrg_get_uint_orig(mrg_state* state);$/;"	p	signature:(mrg_state* state)
mrg_make_A	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^static void mrg_make_A(mrg_transition_matrix* result) { \/* Initial RNG transition matrix *\/$/;"	f	file:	signature:(mrg_transition_matrix* result)
mrg_make_identity	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^static void mrg_make_identity(mrg_transition_matrix* result) {$/;"	f	file:	signature:(mrg_transition_matrix* result)
mrg_multiply	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^static void mrg_multiply(const mrg_transition_matrix* restrict m, const mrg_transition_matrix* restrict n, mrg_transition_matrix* result) {$/;"	f	file:	signature:(const mrg_transition_matrix* restrict m, const mrg_transition_matrix* restrict n, mrg_transition_matrix* result)
mrg_orig_step	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^static void mrg_orig_step(mrg_state* state) { \/* Use original A, not fully optimized yet *\/$/;"	f	file:	signature:(mrg_state* state)
mrg_power	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^static void mrg_power(const mrg_transition_matrix* restrict m, unsigned int exponent, mrg_transition_matrix* restrict result) {$/;"	f	file:	signature:(const mrg_transition_matrix* restrict m, unsigned int exponent, mrg_transition_matrix* restrict result)
mrg_seed	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^void mrg_seed(mrg_state* st, const uint_fast32_t seed[5]) {$/;"	f	signature:(mrg_state* st, const uint_fast32_t seed[5])
mrg_seed	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.h	/^void mrg_seed(mrg_state* st, const uint_fast32_t seed[5]);$/;"	p	signature:(mrg_state* st, const uint_fast32_t seed[5])
mrg_skip	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^void mrg_skip(mrg_state* state, uint_least64_t exponent_high, uint_least64_t exponent_middle, uint_least64_t exponent_low) {$/;"	f	signature:(mrg_state* state, uint_least64_t exponent_high, uint_least64_t exponent_middle, uint_least64_t exponent_low)
mrg_skip	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.h	/^void mrg_skip(mrg_state* state,$/;"	p	signature:(mrg_state* state, uint_least64_t exponent_high, uint_least64_t exponent_middle, uint_least64_t exponent_low)
mrg_skip_matrices	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/mrg_transitions.c	/^const mrg_transition_matrix mrg_skip_matrices[][256] = {$/;"	v
mrg_skip_matrices	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^const mrg_transition_matrix mrg_skip_matrices[][256] = {}; \/* Dummy version *\/$/;"	v
mrg_state	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.h	/^typedef struct mrg_state {$/;"	s
mrg_state	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.h	/^} mrg_state;$/;"	t	typeref:struct:mrg_state
mrg_state::z1	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.h	/^  uint_fast32_t z1, z2, z3, z4, z5;$/;"	m	struct:mrg_state	access:public
mrg_state::z2	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.h	/^  uint_fast32_t z1, z2, z3, z4, z5;$/;"	m	struct:mrg_state	access:public
mrg_state::z3	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.h	/^  uint_fast32_t z1, z2, z3, z4, z5;$/;"	m	struct:mrg_state	access:public
mrg_state::z4	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.h	/^  uint_fast32_t z1, z2, z3, z4, z5;$/;"	m	struct:mrg_state	access:public
mrg_state::z5	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.h	/^  uint_fast32_t z1, z2, z3, z4, z5;$/;"	m	struct:mrg_state	access:public
mrg_step	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^static void mrg_step(const mrg_transition_matrix* mat, mrg_state* state) {$/;"	f	file:	signature:(const mrg_transition_matrix* mat, mrg_state* state)
mrg_transition_matrix	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^typedef struct mrg_transition_matrix {$/;"	s	file:
mrg_transition_matrix	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^} mrg_transition_matrix;$/;"	t	typeref:struct:mrg_transition_matrix	file:
mrg_transition_matrix::a	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^  uint_fast32_t a, b, c, d;$/;"	m	struct:mrg_transition_matrix	file:	access:public
mrg_transition_matrix::b	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^  uint_fast32_t a, b, c, d;$/;"	m	struct:mrg_transition_matrix	file:	access:public
mrg_transition_matrix::c	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^  uint_fast32_t a, b, c, d;$/;"	m	struct:mrg_transition_matrix	file:	access:public
mrg_transition_matrix::d	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^  uint_fast32_t a, b, c, d;$/;"	m	struct:mrg_transition_matrix	file:	access:public
mrg_transition_matrix::s	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^  uint_fast32_t s, t, u, v, w;$/;"	m	struct:mrg_transition_matrix	file:	access:public
mrg_transition_matrix::t	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^  uint_fast32_t s, t, u, v, w;$/;"	m	struct:mrg_transition_matrix	file:	access:public
mrg_transition_matrix::u	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^  uint_fast32_t s, t, u, v, w;$/;"	m	struct:mrg_transition_matrix	file:	access:public
mrg_transition_matrix::v	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^  uint_fast32_t s, t, u, v, w;$/;"	m	struct:mrg_transition_matrix	file:	access:public
mrg_transition_matrix::w	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^  uint_fast32_t s, t, u, v, w;$/;"	m	struct:mrg_transition_matrix	file:	access:public
mrg_update_cache	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^static void mrg_update_cache(mrg_transition_matrix* restrict p) { \/* Set a, b, c, and d *\/$/;"	f	file:	signature:(mrg_transition_matrix* restrict p)
new_edge	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        EdgeID new_edge(NodeID source, NodeID target) {$/;"	f	class:parallel_graph_access	access:public	signature:(NodeID source, NodeID target)
new_node	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID new_node() {$/;"	f	class:parallel_graph_access	access:public	signature:()
nextBool	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                static bool nextBool() {$/;"	f	class:random_functions	access:public	signature:()
nextDouble	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                static double nextDouble(double lb, double rb) {$/;"	f	class:random_functions	access:public	signature:(double lb, double rb)
nextInt	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                static unsigned nextInt(unsigned int lb, unsigned int rb) {$/;"	f	class:random_functions	access:public	signature:(unsigned int lb, unsigned int rb)
no_refinement_in_last_iteration	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        bool no_refinement_in_last_iteration;$/;"	m	struct:PartitionConfig	access:public
node	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID node; \/\/current node that is constructed$/;"	m	class:parallel_graph_access	access:private
node_ordering	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/node_ordering.cpp	/^node_ordering::node_ordering() {$/;"	f	class:node_ordering	signature:()
node_ordering	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/node_ordering.h	/^        node_ordering();$/;"	p	class:node_ordering	access:public	signature:()
node_ordering	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/node_ordering.h	/^class node_ordering {$/;"	c
node_ordering	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        NodeOrderingType node_ordering;$/;"	m	struct:PartitionConfig	access:public
node_ordering::node_ordering	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/node_ordering.cpp	/^node_ordering::node_ordering() {$/;"	f	class:node_ordering	signature:()
node_ordering::node_ordering	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/node_ordering.h	/^        node_ordering();$/;"	p	class:node_ordering	access:public	signature:()
node_ordering::order_leastghostnodes_nodes_degree	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/node_ordering.h	/^        void order_leastghostnodes_nodes_degree(const PartitionConfig & config, parallel_graph_access & G, std::vector< NodeID > & ordered_nodes) { $/;"	f	class:node_ordering	access:public	signature:(const PartitionConfig & config, parallel_graph_access & G, std::vector< NodeID > & ordered_nodes)
node_ordering::order_nodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/node_ordering.h	/^        void order_nodes(const PartitionConfig & config, parallel_graph_access & G, std::vector< NodeID > & ordered_nodes) {$/;"	f	class:node_ordering	access:public	signature:(const PartitionConfig & config, parallel_graph_access & G, std::vector< NodeID > & ordered_nodes)
node_ordering::order_nodes_degree	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/node_ordering.h	/^        void order_nodes_degree(const PartitionConfig & config, parallel_graph_access & G, std::vector< NodeID > & ordered_nodes) { $/;"	f	class:node_ordering	access:public	signature:(const PartitionConfig & config, parallel_graph_access & G, std::vector< NodeID > & ordered_nodes)
node_ordering::order_nodes_degree_leastghostnodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/node_ordering.h	/^	void order_nodes_degree_leastghostnodes(const PartitionConfig & config, parallel_graph_access & G, std::vector< NodeID > & ordered_nodes) { $/;"	f	class:node_ordering	access:public	signature:(const PartitionConfig & config, parallel_graph_access & G, std::vector< NodeID > & ordered_nodes)
node_ordering::order_nodes_random	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/node_ordering.h	/^        void order_nodes_random(const PartitionConfig & config, parallel_graph_access & G, std::vector< NodeID > & ordered_nodes) { $/;"	f	class:node_ordering	access:public	signature:(const PartitionConfig & config, parallel_graph_access & G, std::vector< NodeID > & ordered_nodes)
node_ordering::~node_ordering	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/node_ordering.cpp	/^node_ordering::~node_ordering() {$/;"	f	class:node_ordering	signature:()
node_ordering::~node_ordering	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/node_ordering.h	/^        virtual ~node_ordering();$/;"	p	class:node_ordering	access:public	signature:()
node_separator	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/kaHIP_lib/kaHIP_interface.h	/^void node_separator(int* n, int* vwgt, int* xadj, $/;"	p	signature:(int* n, int* vwgt, int* xadj, int* adjcwgt, int* adjncy, int* nparts, double* imbalance, bool suppress_output, int seed, int mode, int* num_separator_vertices, int** separator)
num_tries	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        int num_tries; \/\/ number of repetitions to perform$/;"	m	struct:PartitionConfig	access:public
num_vcycles	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        int num_vcycles;$/;"	m	struct:PartitionConfig	access:public
number_of_ghost_nodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID number_of_ghost_nodes() {return m_nodes.size() - m_num_local_nodes - 1;};$/;"	f	class:parallel_graph_access	access:public	signature:()
number_of_global_edges	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        EdgeID number_of_global_edges() {return m_global_m;};$/;"	f	class:parallel_graph_access	access:public	signature:()
number_of_global_nodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID number_of_global_nodes() {return m_global_n;};$/;"	f	class:parallel_graph_access	access:public	signature:()
number_of_local_edges	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        EdgeID number_of_local_edges() {return m_edges.size();};$/;"	f	class:parallel_graph_access	access:public	signature:()
number_of_local_nodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID number_of_local_nodes() {return m_num_local_nodes;};$/;"	f	class:parallel_graph_access	access:public	signature:()
number_of_overall_nodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        NodeID number_of_overall_nodes;$/;"	m	struct:PartitionConfig	access:public
operator ()	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/hashed_graph.h	/^        bool operator()(const hashed_edge e_1, const hashed_edge e_2) const {$/;"	f	struct:compare_hashed_edge	access:public	signature:(const hashed_edge e_1, const hashed_edge e_2) const
operator ()	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/hashed_graph.h	/^       unsigned long operator()(const hashed_edge e) const {$/;"	f	struct:hash_hashed_edge	access:public	signature:(const hashed_edge e) const
order_leastghostnodes_nodes_degree	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/node_ordering.h	/^        void order_leastghostnodes_nodes_degree(const PartitionConfig & config, parallel_graph_access & G, std::vector< NodeID > & ordered_nodes) { $/;"	f	class:node_ordering	access:public	signature:(const PartitionConfig & config, parallel_graph_access & G, std::vector< NodeID > & ordered_nodes)
order_nodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/node_ordering.h	/^        void order_nodes(const PartitionConfig & config, parallel_graph_access & G, std::vector< NodeID > & ordered_nodes) {$/;"	f	class:node_ordering	access:public	signature:(const PartitionConfig & config, parallel_graph_access & G, std::vector< NodeID > & ordered_nodes)
order_nodes_degree	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/node_ordering.h	/^        void order_nodes_degree(const PartitionConfig & config, parallel_graph_access & G, std::vector< NodeID > & ordered_nodes) { $/;"	f	class:node_ordering	access:public	signature:(const PartitionConfig & config, parallel_graph_access & G, std::vector< NodeID > & ordered_nodes)
order_nodes_degree_leastghostnodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/node_ordering.h	/^	void order_nodes_degree_leastghostnodes(const PartitionConfig & config, parallel_graph_access & G, std::vector< NodeID > & ordered_nodes) { $/;"	f	class:node_ordering	access:public	signature:(const PartitionConfig & config, parallel_graph_access & G, std::vector< NodeID > & ordered_nodes)
order_nodes_random	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/node_ordering.h	/^        void order_nodes_random(const PartitionConfig & config, parallel_graph_access & G, std::vector< NodeID > & ordered_nodes) { $/;"	f	class:node_ordering	access:public	signature:(const PartitionConfig & config, parallel_graph_access & G, std::vector< NodeID > & ordered_nodes)
packed_edge	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.h	/^typedef struct packed_edge {$/;"	s
packed_edge	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.h	/^} packed_edge;$/;"	t	typeref:struct:packed_edge
packed_edge::high	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.h	/^  uint32_t high; \/* v1 in high half, v0 in low half *\/$/;"	m	struct:packed_edge	access:public
packed_edge::v0	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.h	/^  int64_t v0;$/;"	m	struct:packed_edge	access:public
packed_edge::v0_low	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.h	/^  uint32_t v0_low;$/;"	m	struct:packed_edge	access:public
packed_edge::v1	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.h	/^  int64_t v1;$/;"	m	struct:packed_edge	access:public
packed_edge::v1_low	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.h	/^  uint32_t v1_low;$/;"	m	struct:packed_edge	access:public
parallel_block_down_propagation	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_block_down_propagation.cpp	/^parallel_block_down_propagation::parallel_block_down_propagation() {$/;"	f	class:parallel_block_down_propagation	signature:()
parallel_block_down_propagation	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_block_down_propagation.h	/^        parallel_block_down_propagation();$/;"	p	class:parallel_block_down_propagation	access:public	signature:()
parallel_block_down_propagation	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_block_down_propagation.h	/^class parallel_block_down_propagation {$/;"	c
parallel_block_down_propagation::m_messages	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_block_down_propagation.h	/^        std::vector< std::vector< NodeID > > m_messages;$/;"	m	class:parallel_block_down_propagation	access:private
parallel_block_down_propagation::m_send_buffers	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_block_down_propagation.h	/^        std::vector< std::vector< NodeID > > m_send_buffers; \/\/ buffers to send messages$/;"	m	class:parallel_block_down_propagation	access:private
parallel_block_down_propagation::parallel_block_down_propagation	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_block_down_propagation.cpp	/^parallel_block_down_propagation::parallel_block_down_propagation() {$/;"	f	class:parallel_block_down_propagation	signature:()
parallel_block_down_propagation::parallel_block_down_propagation	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_block_down_propagation.h	/^        parallel_block_down_propagation();$/;"	p	class:parallel_block_down_propagation	access:public	signature:()
parallel_block_down_propagation::propagate_block_down	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_block_down_propagation.cpp	/^void parallel_block_down_propagation::propagate_block_down( PartitionConfig & config, $/;"	f	class:parallel_block_down_propagation	signature:( PartitionConfig & config, parallel_graph_access & G, parallel_graph_access & Q)
parallel_block_down_propagation::propagate_block_down	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_block_down_propagation.h	/^        void propagate_block_down( PartitionConfig & config, $/;"	p	class:parallel_block_down_propagation	access:public	signature:( PartitionConfig & config, parallel_graph_access & G, parallel_graph_access & Q)
parallel_block_down_propagation::update_ghost_nodes_blocks	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_block_down_propagation.cpp	/^void parallel_block_down_propagation::update_ghost_nodes_blocks( parallel_graph_access & G ) {$/;"	f	class:parallel_block_down_propagation	signature:( parallel_graph_access & G )
parallel_block_down_propagation::update_ghost_nodes_blocks	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_block_down_propagation.h	/^        void update_ghost_nodes_blocks( parallel_graph_access & G ); $/;"	p	class:parallel_block_down_propagation	access:private	signature:( parallel_graph_access & G )
parallel_block_down_propagation::~parallel_block_down_propagation	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_block_down_propagation.cpp	/^parallel_block_down_propagation::~parallel_block_down_propagation() {$/;"	f	class:parallel_block_down_propagation	signature:()
parallel_block_down_propagation::~parallel_block_down_propagation	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_block_down_propagation.h	/^        virtual ~parallel_block_down_propagation();$/;"	p	class:parallel_block_down_propagation	access:public	signature:()
parallel_contraction	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.cpp	/^parallel_contraction::parallel_contraction() {$/;"	f	class:parallel_contraction	signature:()
parallel_contraction	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.h	/^        parallel_contraction();$/;"	p	class:parallel_contraction	access:public	signature:()
parallel_contraction	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.h	/^class parallel_contraction {$/;"	c
parallel_contraction::build_quotient_graph_locally	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.cpp	/^void parallel_contraction::build_quotient_graph_locally( parallel_graph_access & G, $/;"	f	class:parallel_contraction	signature:( parallel_graph_access & G, NodeID number_of_distinct_labels, hashed_graph & hG, std::unordered_map< NodeID, NodeWeight > & node_weights)
parallel_contraction::build_quotient_graph_locally	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.h	/^	void build_quotient_graph_locally( parallel_graph_access & G, $/;"	p	class:parallel_contraction	access:private	signature:( parallel_graph_access & G, NodeID number_of_distinct_labels, hashed_graph & hG, std::unordered_map< NodeID, NodeWeight > & node_weights)
parallel_contraction::compute_label_mapping	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.cpp	/^void parallel_contraction::compute_label_mapping( parallel_graph_access & G, $/;"	f	class:parallel_contraction	signature:( parallel_graph_access & G, NodeID & global_num_distinct_ids, std::unordered_map< NodeID, NodeID > & label_mapping )
parallel_contraction::compute_label_mapping	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.h	/^        void compute_label_mapping( parallel_graph_access & G, $/;"	p	class:parallel_contraction	access:private	signature:( parallel_graph_access & G, NodeID & global_num_distinct_ids, std::unordered_map< NodeID, NodeID > & label_mapping)
parallel_contraction::contract_to_distributed_quotient	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.cpp	/^void parallel_contraction::contract_to_distributed_quotient( PartitionConfig & config, $/;"	f	class:parallel_contraction	signature:( PartitionConfig & config, parallel_graph_access & G, parallel_graph_access & Q)
parallel_contraction::contract_to_distributed_quotient	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.h	/^        void contract_to_distributed_quotient( PartitionConfig & config, $/;"	p	class:parallel_contraction	access:public	signature:( PartitionConfig & config, parallel_graph_access & G, parallel_graph_access & Q)
parallel_contraction::get_nodes_to_cnodes_ghost_nodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.cpp	/^void parallel_contraction::get_nodes_to_cnodes_ghost_nodes( parallel_graph_access & G ) {$/;"	f	class:parallel_contraction	signature:( parallel_graph_access & G )
parallel_contraction::get_nodes_to_cnodes_ghost_nodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.h	/^        void get_nodes_to_cnodes_ghost_nodes( parallel_graph_access & G );   $/;"	p	class:parallel_contraction	access:private	signature:( parallel_graph_access & G )
parallel_contraction::m_messages	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.h	/^        std::vector< std::vector< NodeID > >  m_messages;$/;"	m	class:parallel_contraction	access:private
parallel_contraction::m_out_messages	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.h	/^        std::vector< std::vector< NodeID > >  m_out_messages;$/;"	m	class:parallel_contraction	access:private
parallel_contraction::m_send_buffers	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.h	/^        std::vector< std::vector< NodeID > >  m_send_buffers; \/\/ buffers to send messages$/;"	m	class:parallel_contraction	access:private
parallel_contraction::parallel_contraction	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.cpp	/^parallel_contraction::parallel_contraction() {$/;"	f	class:parallel_contraction	signature:()
parallel_contraction::parallel_contraction	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.h	/^        parallel_contraction();$/;"	p	class:parallel_contraction	access:public	signature:()
parallel_contraction::redistribute_hased_graph_and_build_graph_locally	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.cpp	/^void parallel_contraction::redistribute_hased_graph_and_build_graph_locally( hashed_graph &  hG, $/;"	f	class:parallel_contraction	signature:( hashed_graph & hG, std::unordered_map< NodeID, NodeWeight > & node_weights, NodeID number_of_cnodes, parallel_graph_access & Q )
parallel_contraction::redistribute_hased_graph_and_build_graph_locally	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.h	/^        void redistribute_hased_graph_and_build_graph_locally( hashed_graph &  hG, $/;"	p	class:parallel_contraction	access:private	signature:( hashed_graph & hG, std::unordered_map< NodeID, NodeWeight > & node_weights, NodeID number_of_cnodes, parallel_graph_access & Q)
parallel_contraction::update_ghost_nodes_weights	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.cpp	/^void parallel_contraction::update_ghost_nodes_weights( parallel_graph_access & G ) {$/;"	f	class:parallel_contraction	signature:( parallel_graph_access & G )
parallel_contraction::update_ghost_nodes_weights	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.h	/^        void update_ghost_nodes_weights( parallel_graph_access & G ); $/;"	p	class:parallel_contraction	access:private	signature:( parallel_graph_access & G )
parallel_contraction::~parallel_contraction	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.cpp	/^parallel_contraction::~parallel_contraction() {$/;"	f	class:parallel_contraction	signature:()
parallel_contraction::~parallel_contraction	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.h	/^        virtual ~parallel_contraction();$/;"	p	class:parallel_contraction	access:public	signature:()
parallel_graph_access	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.cpp	/^parallel_graph_access::parallel_graph_access( ) : m_num_local_nodes(0), $/;"	f	class:parallel_graph_access	signature:( )
parallel_graph_access	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        parallel_graph_access( );$/;"	p	class:parallel_graph_access	access:public	signature:( )
parallel_graph_access	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^class parallel_graph_access {$/;"	c
parallel_graph_access::UNSAFE_metis_style_adjncy_array	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        int* UNSAFE_metis_style_adjncy_array();$/;"	p	class:parallel_graph_access	access:public	signature:()
parallel_graph_access::UNSAFE_metis_style_adjncy_array	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline int* parallel_graph_access::UNSAFE_metis_style_adjncy_array() {$/;"	f	class:parallel_graph_access	signature:()
parallel_graph_access::UNSAFE_metis_style_adjwgt_array	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        int* UNSAFE_metis_style_adjwgt_array();$/;"	p	class:parallel_graph_access	access:public	signature:()
parallel_graph_access::UNSAFE_metis_style_adjwgt_array	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline int* parallel_graph_access::UNSAFE_metis_style_adjwgt_array() {$/;"	f	class:parallel_graph_access	signature:()
parallel_graph_access::UNSAFE_metis_style_vwgt_array	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        int* UNSAFE_metis_style_vwgt_array();$/;"	p	class:parallel_graph_access	access:public	signature:()
parallel_graph_access::UNSAFE_metis_style_vwgt_array	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline int* parallel_graph_access::UNSAFE_metis_style_vwgt_array() {$/;"	f	class:parallel_graph_access	signature:()
parallel_graph_access::UNSAFE_metis_style_xadj_array	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        int* UNSAFE_metis_style_xadj_array();$/;"	p	class:parallel_graph_access	access:public	signature:()
parallel_graph_access::UNSAFE_metis_style_xadj_array	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline int* parallel_graph_access::UNSAFE_metis_style_xadj_array() {$/;"	f	class:parallel_graph_access	signature:()
parallel_graph_access::allocate_node_to_cnode	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void allocate_node_to_cnode() {$/;"	f	class:parallel_graph_access	access:public	signature:()
parallel_graph_access::build_from_metis	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        int build_from_metis(int n, int* xadj, int* adjncy);$/;"	p	class:parallel_graph_access	access:public	signature:(int n, int* xadj, int* adjncy)
parallel_graph_access::build_from_metis	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline int parallel_graph_access::build_from_metis(int n, int* xadj, int* adjncy) {$/;"	f	class:parallel_graph_access	signature:(int n, int* xadj, int* adjncy)
parallel_graph_access::build_from_metis_weighted	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        int build_from_metis_weighted(int n, int* xadj, int* adjncy, int * vwgt, int* adjwgt);$/;"	p	class:parallel_graph_access	access:public	signature:(int n, int* xadj, int* adjncy, int * vwgt, int* adjwgt)
parallel_graph_access::build_from_metis_weighted	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline int parallel_graph_access::build_from_metis_weighted(int n, int* xadj, int* adjncy, int * vwgt, int* adjwgt) {$/;"	f	class:parallel_graph_access	signature:(int n, int* xadj, int* adjncy, int * vwgt, int* adjwgt)
parallel_graph_access::e	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        EdgeID e;    \/\/current edge that is constructed$/;"	m	class:parallel_graph_access	access:private
parallel_graph_access::finish_construction	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void finish_construction() {$/;"	f	class:parallel_graph_access	access:public	signature:()
parallel_graph_access::from	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID from; \/\/ each process stores nodes [from. to]$/;"	m	class:parallel_graph_access	access:private
parallel_graph_access::getBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeWeight getBlockSize( PartitionID block );$/;"	p	class:parallel_graph_access	access:public	signature:( PartitionID block )
parallel_graph_access::getBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^NodeWeight parallel_graph_access::getBlockSize( PartitionID block ) {$/;"	f	class:parallel_graph_access	signature:( PartitionID block )
parallel_graph_access::getCNode	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID getCNode( NodeID node ) {$/;"	f	class:parallel_graph_access	access:public	signature:( NodeID node )
parallel_graph_access::getEdgeTarget	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID getEdgeTarget(EdgeID e);$/;"	p	class:parallel_graph_access	access:public	signature:(EdgeID e)
parallel_graph_access::getEdgeTarget	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline NodeID parallel_graph_access::getEdgeTarget(EdgeID e){$/;"	f	class:parallel_graph_access	signature:(EdgeID e)
parallel_graph_access::getEdgeWeight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        EdgeWeight getEdgeWeight(EdgeID e); $/;"	p	class:parallel_graph_access	access:public	signature:(EdgeID e)
parallel_graph_access::getEdgeWeight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline EdgeWeight parallel_graph_access::getEdgeWeight(EdgeID e) {$/;"	f	class:parallel_graph_access	signature:(EdgeID e)
parallel_graph_access::getGlobalID	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        PEID getGlobalID(NodeID node);$/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node)
parallel_graph_access::getGlobalID	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline PEID parallel_graph_access::getGlobalID(NodeID node) {$/;"	f	class:parallel_graph_access	signature:(NodeID node)
parallel_graph_access::getLocalID	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID getLocalID(NodeID node) {$/;"	f	class:parallel_graph_access	access:public	signature:(NodeID node)
parallel_graph_access::getNodeDegree	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        EdgeID getNodeDegree(NodeID node);$/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node)
parallel_graph_access::getNodeDegree	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline EdgeID parallel_graph_access::getNodeDegree(NodeID node) {$/;"	f	class:parallel_graph_access	signature:(NodeID node)
parallel_graph_access::getNodeLabel	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID getNodeLabel(NodeID node); $/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node)
parallel_graph_access::getNodeLabel	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline EdgeID parallel_graph_access::getNodeLabel(NodeID node) {$/;"	f	class:parallel_graph_access	signature:(NodeID node)
parallel_graph_access::getNodeNumGhostNodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        EdgeID getNodeNumGhostNodes(NodeID node);$/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node)
parallel_graph_access::getNodeNumGhostNodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline EdgeID parallel_graph_access::getNodeNumGhostNodes(NodeID node) {$/;"	f	class:parallel_graph_access	signature:(NodeID node)
parallel_graph_access::getNodeWeight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeWeight getNodeWeight(NodeID node); $/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node)
parallel_graph_access::getNodeWeight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline NodeWeight parallel_graph_access::getNodeWeight(NodeID node) {$/;"	f	class:parallel_graph_access	signature:(NodeID node)
parallel_graph_access::getNumberOfAdjacentPEs	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        PEID getNumberOfAdjacentPEs() {$/;"	f	class:parallel_graph_access	access:public	signature:()
parallel_graph_access::getSecondPartitionIndex	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID getSecondPartitionIndex(NodeID node); $/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node)
parallel_graph_access::getSecondPartitionIndex	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^NodeID parallel_graph_access::getSecondPartitionIndex(NodeID node) {$/;"	f	class:parallel_graph_access	signature:(NodeID node)
parallel_graph_access::getTargetPE	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        PEID getTargetPE(NodeID node);$/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node)
parallel_graph_access::getTargetPE	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline PEID parallel_graph_access::getTargetPE(NodeID node) {$/;"	f	class:parallel_graph_access	signature:(NodeID node)
parallel_graph_access::get_first_edge	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        EdgeID get_first_edge(NodeID node);$/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node)
parallel_graph_access::get_first_edge	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline EdgeID parallel_graph_access::get_first_edge(NodeID node) {$/;"	f	class:parallel_graph_access	signature:(NodeID node)
parallel_graph_access::get_first_invalid_edge	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        EdgeID get_first_invalid_edge(NodeID node);$/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node)
parallel_graph_access::get_first_invalid_edge	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline EdgeID parallel_graph_access::get_first_invalid_edge(NodeID node) {$/;"	f	class:parallel_graph_access	signature:(NodeID node)
parallel_graph_access::init_balance_management	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.cpp	/^void parallel_graph_access::init_balance_management( PartitionConfig & config ) {$/;"	f	class:parallel_graph_access	signature:( PartitionConfig & config )
parallel_graph_access::init_balance_management	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void init_balance_management( PartitionConfig & config );$/;"	p	class:parallel_graph_access	access:public	signature:( PartitionConfig & config )
parallel_graph_access::is_adjacent_PE	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        bool is_adjacent_PE(PEID peID) {$/;"	f	class:parallel_graph_access	access:public	signature:(PEID peID)
parallel_graph_access::is_interface_node	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        bool is_interface_node(NodeID node);$/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node)
parallel_graph_access::is_interface_node	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline bool parallel_graph_access::is_interface_node(NodeID node) {$/;"	f	class:parallel_graph_access	signature:(NodeID node)
parallel_graph_access::is_local_node	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        bool is_local_node(NodeID node);$/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node)
parallel_graph_access::is_local_node	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline bool parallel_graph_access::is_local_node(NodeID node) {$/;"	f	class:parallel_graph_access	signature:(NodeID node)
parallel_graph_access::is_local_node_from_global_id	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        bool is_local_node_from_global_id(NodeID node);$/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node)
parallel_graph_access::is_local_node_from_global_id	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline bool parallel_graph_access::is_local_node_from_global_id(NodeID node) {$/;"	f	class:parallel_graph_access	signature:(NodeID node)
parallel_graph_access::m_add_non_local_node_data	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        std::vector<AdditionalNonLocalNodeData> m_add_non_local_node_data;$/;"	m	class:parallel_graph_access	access:private
parallel_graph_access::m_bm	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        balance_management* m_bm;$/;"	m	class:parallel_graph_access	access:private
parallel_graph_access::m_building_graph	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        bool   m_building_graph;$/;"	m	class:parallel_graph_access	access:private
parallel_graph_access::m_comm_rounds	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.cpp	/^unsigned long parallel_graph_access::m_comm_rounds = 128; $/;"	m	class:parallel_graph_access	file:
parallel_graph_access::m_comm_rounds	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        static unsigned long m_comm_rounds; \/\/ global number of edges$/;"	m	class:parallel_graph_access	access:private
parallel_graph_access::m_comm_rounds_up	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.cpp	/^unsigned long parallel_graph_access::m_comm_rounds_up = 128; $/;"	m	class:parallel_graph_access	file:
parallel_graph_access::m_comm_rounds_up	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        static unsigned long m_comm_rounds_up; \/\/ global number of edges$/;"	m	class:parallel_graph_access	access:private
parallel_graph_access::m_divisor	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID m_divisor; \/\/ needed to compute the target id of a ghost node$/;"	m	class:parallel_graph_access	access:private
parallel_graph_access::m_edges	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        std::vector<Edge>                       m_edges;$/;"	m	class:parallel_graph_access	access:private
parallel_graph_access::m_ghost_adddata_array_offset	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID m_ghost_adddata_array_offset; \/\/ node id of ghost node - offset to get the position in add data  $/;"	m	class:parallel_graph_access	access:private
parallel_graph_access::m_global_m	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID m_global_m; \/\/ global number of edges$/;"	m	class:parallel_graph_access	access:private
parallel_graph_access::m_global_n	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID m_global_n; \/\/ global number of nodes$/;"	m	class:parallel_graph_access	access:private
parallel_graph_access::m_global_to_local_id	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        std::unordered_map<NodeID, NodeID> m_global_to_local_id;$/;"	m	class:parallel_graph_access	access:private
parallel_graph_access::m_gnc	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        ghost_node_communication* m_gnc;$/;"	m	class:parallel_graph_access	access:private
parallel_graph_access::m_last_source	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID m_last_source;$/;"	m	class:parallel_graph_access	access:private
parallel_graph_access::m_nodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        std::vector<Node>                       m_nodes; $/;"	m	class:parallel_graph_access	access:private
parallel_graph_access::m_nodes_data	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        std::vector<NodeData>                   m_nodes_data;$/;"	m	class:parallel_graph_access	access:private
parallel_graph_access::m_nodes_to_cnode	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        std::vector<NodeID>                     m_nodes_to_cnode; $/;"	m	class:parallel_graph_access	access:private
parallel_graph_access::m_num_ghost_nodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID m_num_ghost_nodes;$/;"	m	class:parallel_graph_access	access:private
parallel_graph_access::m_num_local_nodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID m_num_local_nodes; \/\/ store the number of local \/ non-ghost nodes$/;"	m	class:parallel_graph_access	access:private
parallel_graph_access::m_num_nodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID m_num_nodes; \/\/ TODO naming$/;"	m	class:parallel_graph_access	access:private
parallel_graph_access::new_edge	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        EdgeID new_edge(NodeID source, NodeID target) {$/;"	f	class:parallel_graph_access	access:public	signature:(NodeID source, NodeID target)
parallel_graph_access::new_node	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID new_node() {$/;"	f	class:parallel_graph_access	access:public	signature:()
parallel_graph_access::node	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID node; \/\/current node that is constructed$/;"	m	class:parallel_graph_access	access:private
parallel_graph_access::number_of_ghost_nodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID number_of_ghost_nodes() {return m_nodes.size() - m_num_local_nodes - 1;};$/;"	f	class:parallel_graph_access	access:public	signature:()
parallel_graph_access::number_of_global_edges	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        EdgeID number_of_global_edges() {return m_global_m;};$/;"	f	class:parallel_graph_access	access:public	signature:()
parallel_graph_access::number_of_global_nodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID number_of_global_nodes() {return m_global_n;};$/;"	f	class:parallel_graph_access	access:public	signature:()
parallel_graph_access::number_of_local_edges	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        EdgeID number_of_local_edges() {return m_edges.size();};$/;"	f	class:parallel_graph_access	access:public	signature:()
parallel_graph_access::number_of_local_nodes	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID number_of_local_nodes() {return m_num_local_nodes;};$/;"	f	class:parallel_graph_access	access:public	signature:()
parallel_graph_access::parallel_graph_access	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.cpp	/^parallel_graph_access::parallel_graph_access( ) : m_num_local_nodes(0), $/;"	f	class:parallel_graph_access	signature:( )
parallel_graph_access::parallel_graph_access	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        parallel_graph_access( );$/;"	p	class:parallel_graph_access	access:public	signature:( )
parallel_graph_access::printMemoryUsage	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        unsigned int printMemoryUsage(std::ostream& out, const std::string descr, const unsigned int mem) const {$/;"	f	class:parallel_graph_access	access:public	signature:(std::ostream& out, const std::string descr, const unsigned int mem) const
parallel_graph_access::printMemoryUsage	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void printMemoryUsage(std::ostream& out) const {$/;"	f	class:parallel_graph_access	access:public	signature:(std::ostream& out) const
parallel_graph_access::rank	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        PEID rank;$/;"	m	class:parallel_graph_access	access:private
parallel_graph_access::reinit	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void reinit();$/;"	p	class:parallel_graph_access	access:public	signature:()
parallel_graph_access::setBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void setBlockSize( PartitionID block, NodeWeight block_size );$/;"	p	class:parallel_graph_access	access:public	signature:( PartitionID block, NodeWeight block_size )
parallel_graph_access::setBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^void parallel_graph_access::setBlockSize( PartitionID block, NodeWeight block_size ) {$/;"	f	class:parallel_graph_access	signature:( PartitionID block, NodeWeight block_size )
parallel_graph_access::setCNode	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void setCNode( NodeID node, NodeID cnode) {$/;"	f	class:parallel_graph_access	access:public	signature:( NodeID node, NodeID cnode)
parallel_graph_access::setEdgeWeight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void setEdgeWeight(EdgeID e, EdgeWeight weight); $/;"	p	class:parallel_graph_access	access:public	signature:(EdgeID e, EdgeWeight weight)
parallel_graph_access::setEdgeWeight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline void parallel_graph_access::setEdgeWeight(EdgeID e, EdgeWeight weight) {$/;"	f	class:parallel_graph_access	signature:(EdgeID e, EdgeWeight weight)
parallel_graph_access::setNodeLabel	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void setNodeLabel(NodeID node, NodeID label); $/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node, NodeID label)
parallel_graph_access::setNodeLabel	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline void parallel_graph_access::setNodeLabel(NodeID node, NodeID label) {$/;"	f	class:parallel_graph_access	signature:(NodeID node, NodeID label)
parallel_graph_access::setNodeWeight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void setNodeWeight(NodeID node, NodeWeight weight); $/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node, NodeWeight weight)
parallel_graph_access::setNodeWeight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline void parallel_graph_access::setNodeWeight(NodeID node, NodeWeight weight) {$/;"	f	class:parallel_graph_access	signature:(NodeID node, NodeWeight weight)
parallel_graph_access::setSecondPartitionIndex	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void setSecondPartitionIndex(NodeID node, NodeID label); $/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node, NodeID label)
parallel_graph_access::setSecondPartitionIndex	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^void parallel_graph_access::setSecondPartitionIndex(NodeID node, NodeID block) {$/;"	f	class:parallel_graph_access	signature:(NodeID node, NodeID block)
parallel_graph_access::set_comm_rounds	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.cpp	/^void parallel_graph_access::set_comm_rounds(unsigned long comm_rounds) {$/;"	f	class:parallel_graph_access	signature:(unsigned long comm_rounds)
parallel_graph_access::set_comm_rounds	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        static void set_comm_rounds(unsigned long comm_rounds); $/;"	p	class:parallel_graph_access	access:public	signature:(unsigned long comm_rounds)
parallel_graph_access::set_comm_rounds_up	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.cpp	/^void parallel_graph_access::set_comm_rounds_up(unsigned long comm_rounds) {$/;"	f	class:parallel_graph_access	signature:(unsigned long comm_rounds)
parallel_graph_access::set_comm_rounds_up	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        static void set_comm_rounds_up(unsigned long comm_rounds); $/;"	p	class:parallel_graph_access	access:public	signature:(unsigned long comm_rounds)
parallel_graph_access::set_number_of_global_edges	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void set_number_of_global_edges( EdgeID global_edges) {m_global_m = global_edges;};$/;"	f	class:parallel_graph_access	access:public	signature:( EdgeID global_edges)
parallel_graph_access::set_range	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void set_range(NodeID l, NodeID r) {$/;"	f	class:parallel_graph_access	access:public	signature:(NodeID l, NodeID r)
parallel_graph_access::size	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        PEID size;$/;"	m	class:parallel_graph_access	access:private
parallel_graph_access::start_construction	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void start_construction(NodeID n, EdgeID m, NodeID global_n, NodeID global_m, bool update_comm_rounds = true) {$/;"	f	class:parallel_graph_access	access:public	signature:(NodeID n, EdgeID m, NodeID global_n, NodeID global_m, bool update_comm_rounds = true)
parallel_graph_access::to	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID to; $/;"	m	class:parallel_graph_access	access:private
parallel_graph_access::update_block_weights	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.cpp	/^void parallel_graph_access::update_block_weights() {$/;"	f	class:parallel_graph_access	signature:()
parallel_graph_access::update_block_weights	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void update_block_weights();$/;"	p	class:parallel_graph_access	access:public	signature:()
parallel_graph_access::update_ghost_node_data	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.cpp	/^void parallel_graph_access::update_ghost_node_data( bool check_iteration_counter ) {$/;"	f	class:parallel_graph_access	signature:( bool check_iteration_counter )
parallel_graph_access::update_ghost_node_data	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void update_ghost_node_data( bool check_iteration_counter = true );$/;"	p	class:parallel_graph_access	access:public	signature:( bool check_iteration_counter = true )
parallel_graph_access::update_ghost_node_data_finish	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.cpp	/^void parallel_graph_access::update_ghost_node_data_finish() {$/;"	f	class:parallel_graph_access	signature:()
parallel_graph_access::update_ghost_node_data_finish	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void update_ghost_node_data_finish();$/;"	p	class:parallel_graph_access	access:public	signature:()
parallel_graph_access::update_ghost_node_data_global	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.cpp	/^void parallel_graph_access::update_ghost_node_data_global() {$/;"	f	class:parallel_graph_access	signature:()
parallel_graph_access::update_ghost_node_data_global	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void update_ghost_node_data_global();$/;"	p	class:parallel_graph_access	access:public	signature:()
parallel_graph_access::update_non_contained_block_balance	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.cpp	/^void parallel_graph_access::update_non_contained_block_balance( PartitionID from, PartitionID to, NodeWeight node_weight) {$/;"	f	class:parallel_graph_access	signature:( PartitionID from, PartitionID to, NodeWeight node_weight)
parallel_graph_access::update_non_contained_block_balance	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void update_non_contained_block_balance( PartitionID from, PartitionID to, NodeWeight node_weight);$/;"	p	class:parallel_graph_access	access:public	signature:( PartitionID from, PartitionID to, NodeWeight node_weight)
parallel_graph_access::~parallel_graph_access	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.cpp	/^parallel_graph_access::~parallel_graph_access() {$/;"	f	class:parallel_graph_access	signature:()
parallel_graph_access::~parallel_graph_access	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        virtual ~parallel_graph_access();$/;"	p	class:parallel_graph_access	access:public	signature:()
parallel_graph_io	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.cpp	/^parallel_graph_io::parallel_graph_io() {$/;"	f	class:parallel_graph_io	signature:()
parallel_graph_io	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.h	/^        parallel_graph_io();$/;"	p	class:parallel_graph_io	access:public	signature:()
parallel_graph_io	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.h	/^class parallel_graph_io {$/;"	c
parallel_graph_io::parallel_graph_io	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.cpp	/^parallel_graph_io::parallel_graph_io() {$/;"	f	class:parallel_graph_io	signature:()
parallel_graph_io::parallel_graph_io	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.h	/^        parallel_graph_io();$/;"	p	class:parallel_graph_io	access:public	signature:()
parallel_graph_io::readGraphWeighted	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.cpp	/^int parallel_graph_io::readGraphWeighted(parallel_graph_access & G, $/;"	f	class:parallel_graph_io	signature:(parallel_graph_access & G, std::string filename, PEID peID, PEID comm_size)
parallel_graph_io::readGraphWeighted	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.h	/^        static int readGraphWeighted(parallel_graph_access & G, $/;"	p	class:parallel_graph_io	access:public	signature:(parallel_graph_access & G, std::string filename, PEID peID, PEID comm_size)
parallel_graph_io::writeGraphParallelSimple	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.cpp	/^int parallel_graph_io::writeGraphParallelSimple(parallel_graph_access & G, $/;"	f	class:parallel_graph_io	signature:(parallel_graph_access & G, std::string filename)
parallel_graph_io::writeGraphParallelSimple	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.h	/^        static int writeGraphParallelSimple(parallel_graph_access & G, $/;"	p	class:parallel_graph_io	access:public	signature:(parallel_graph_access & G, std::string filename)
parallel_graph_io::writeGraphSequentially	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.cpp	/^int parallel_graph_io::writeGraphSequentially(complete_graph_access & G, std::ofstream & f) {$/;"	f	class:parallel_graph_io	signature:(complete_graph_access & G, std::ofstream & f)
parallel_graph_io::writeGraphSequentially	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.cpp	/^int parallel_graph_io::writeGraphSequentially(complete_graph_access & G, std::string filename) {$/;"	f	class:parallel_graph_io	signature:(complete_graph_access & G, std::string filename)
parallel_graph_io::writeGraphSequentially	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.h	/^        static int writeGraphSequentially(complete_graph_access & G, $/;"	p	class:parallel_graph_io	access:public	signature:(complete_graph_access & G, std::ofstream & f)
parallel_graph_io::writeGraphSequentially	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.h	/^        static int writeGraphSequentially(complete_graph_access & G, $/;"	p	class:parallel_graph_io	access:public	signature:(complete_graph_access & G, std::string filename)
parallel_graph_io::writeGraphWeightedParallelSimple	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.cpp	/^int parallel_graph_io::writeGraphWeightedParallelSimple(parallel_graph_access & G, $/;"	f	class:parallel_graph_io	signature:(parallel_graph_access & G, std::string filename)
parallel_graph_io::writeGraphWeightedParallelSimple	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.h	/^        static int writeGraphWeightedParallelSimple(parallel_graph_access & G, $/;"	p	class:parallel_graph_io	access:public	signature:(parallel_graph_access & G, std::string filename)
parallel_graph_io::writeGraphWeightedSequentially	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.cpp	/^int parallel_graph_io::writeGraphWeightedSequentially(complete_graph_access & G, std::string filename) {$/;"	f	class:parallel_graph_io	signature:(complete_graph_access & G, std::string filename)
parallel_graph_io::writeGraphWeightedSequentially	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.h	/^        static int writeGraphWeightedSequentially(complete_graph_access & G, $/;"	p	class:parallel_graph_io	access:public	signature:(complete_graph_access & G, std::string filename)
parallel_graph_io::~parallel_graph_io	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.cpp	/^parallel_graph_io::~parallel_graph_io() {$/;"	f	class:parallel_graph_io	signature:()
parallel_graph_io::~parallel_graph_io	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.h	/^        virtual ~parallel_graph_io();$/;"	p	class:parallel_graph_io	access:public	signature:()
parallel_label_compress	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/parallel_label_compress.cpp	/^parallel_label_compress::parallel_label_compress() {$/;"	f	class:parallel_label_compress	signature:()
parallel_label_compress	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/parallel_label_compress.h	/^        parallel_label_compress();$/;"	p	class:parallel_label_compress	access:public	signature:()
parallel_label_compress	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/parallel_label_compress.h	/^class parallel_label_compress {$/;"	c
parallel_label_compress::parallel_label_compress	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/parallel_label_compress.cpp	/^parallel_label_compress::parallel_label_compress() {$/;"	f	class:parallel_label_compress	signature:()
parallel_label_compress::parallel_label_compress	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/parallel_label_compress.h	/^        parallel_label_compress();$/;"	p	class:parallel_label_compress	access:public	signature:()
parallel_label_compress::perform_parallel_label_compression	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/parallel_label_compress.cpp	/^void parallel_label_compress::perform_parallel_label_compression( PartitionConfig & config, $/;"	f	class:parallel_label_compress	signature:( PartitionConfig & config, parallel_graph_access & G, bool balance, bool for_coarsening)
parallel_label_compress::perform_parallel_label_compression	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/parallel_label_compress.h	/^        void perform_parallel_label_compression( PartitionConfig & config, $/;"	p	class:parallel_label_compress	access:public	signature:( PartitionConfig & config, parallel_graph_access & G, bool balance, bool for_coarsening = true)
parallel_label_compress::~parallel_label_compress	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/parallel_label_compress.cpp	/^parallel_label_compress::~parallel_label_compress() {$/;"	f	class:parallel_label_compress	signature:()
parallel_label_compress::~parallel_label_compress	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/parallel_label_compress.h	/^        virtual ~parallel_label_compress();$/;"	p	class:parallel_label_compress	access:public	signature:()
parallel_project	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_projection.cpp	/^void parallel_projection::parallel_project( parallel_graph_access & finer, parallel_graph_access & coarser ) {$/;"	f	class:parallel_projection	signature:( parallel_graph_access & finer, parallel_graph_access & coarser )
parallel_project	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_projection.h	/^        void parallel_project( parallel_graph_access & finer, parallel_graph_access & coarser );$/;"	p	class:parallel_projection	access:public	signature:( parallel_graph_access & finer, parallel_graph_access & coarser )
parallel_projection	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_projection.cpp	/^parallel_projection::parallel_projection() {$/;"	f	class:parallel_projection	signature:()
parallel_projection	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_projection.h	/^        parallel_projection();$/;"	p	class:parallel_projection	access:public	signature:()
parallel_projection	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_projection.h	/^class parallel_projection {$/;"	c
parallel_projection::initial_assignment	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_projection.cpp	/^void parallel_projection::initial_assignment( parallel_graph_access & G, complete_graph_access & Q) {$/;"	f	class:parallel_projection	signature:( parallel_graph_access & G, complete_graph_access & Q)
parallel_projection::initial_assignment	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_projection.h	/^        void initial_assignment( parallel_graph_access & G, complete_graph_access & Q);$/;"	p	class:parallel_projection	access:public	signature:( parallel_graph_access & G, complete_graph_access & Q)
parallel_projection::m_messages	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_projection.h	/^        std::vector< std::vector< NodeID > > m_messages;$/;"	m	class:parallel_projection	access:private
parallel_projection::parallel_project	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_projection.cpp	/^void parallel_projection::parallel_project( parallel_graph_access & finer, parallel_graph_access & coarser ) {$/;"	f	class:parallel_projection	signature:( parallel_graph_access & finer, parallel_graph_access & coarser )
parallel_projection::parallel_project	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_projection.h	/^        void parallel_project( parallel_graph_access & finer, parallel_graph_access & coarser );$/;"	p	class:parallel_projection	access:public	signature:( parallel_graph_access & finer, parallel_graph_access & coarser )
parallel_projection::parallel_projection	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_projection.cpp	/^parallel_projection::parallel_projection() {$/;"	f	class:parallel_projection	signature:()
parallel_projection::parallel_projection	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_projection.h	/^        parallel_projection();$/;"	p	class:parallel_projection	access:public	signature:()
parallel_projection::~parallel_projection	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_projection.cpp	/^parallel_projection::~parallel_projection() {$/;"	f	class:parallel_projection	signature:()
parallel_projection::~parallel_projection	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_projection.h	/^        virtual ~parallel_projection();$/;"	p	class:parallel_projection	access:public	signature:()
parallel_vector_io	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_vector_io.cpp	/^parallel_vector_io::parallel_vector_io() {$/;"	f	class:parallel_vector_io	signature:()
parallel_vector_io	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_vector_io.h	/^        parallel_vector_io();$/;"	p	class:parallel_vector_io	access:public	signature:()
parallel_vector_io	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_vector_io.h	/^class parallel_vector_io {$/;"	c
parallel_vector_io::parallel_vector_io	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_vector_io.cpp	/^parallel_vector_io::parallel_vector_io() {$/;"	f	class:parallel_vector_io	signature:()
parallel_vector_io::parallel_vector_io	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_vector_io.h	/^        parallel_vector_io();$/;"	p	class:parallel_vector_io	access:public	signature:()
parallel_vector_io::readVectorSequentially	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_vector_io.h	/^        void readVectorSequentially(std::vector<vectortype> & vec, std::string filename);$/;"	p	class:parallel_vector_io	access:public	signature:(std::vector<vectortype> & vec, std::string filename)
parallel_vector_io::readVectorSequentially	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_vector_io.h	/^void parallel_vector_io::readVectorSequentially(std::vector<vectortype> & vec, std::string filename) {$/;"	f	class:parallel_vector_io	signature:(std::vector<vectortype> & vec, std::string filename)
parallel_vector_io::writeVectorSequentially	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_vector_io.h	/^        void writeVectorSequentially(std::vector<vectortype> & vec, std::string filename);$/;"	p	class:parallel_vector_io	access:public	signature:(std::vector<vectortype> & vec, std::string filename)
parallel_vector_io::writeVectorSequentially	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_vector_io.h	/^void parallel_vector_io::writeVectorSequentially(std::vector<vectortype> & vec, std::string filename) {$/;"	f	class:parallel_vector_io	signature:(std::vector<vectortype> & vec, std::string filename)
parallel_vector_io::~parallel_vector_io	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_vector_io.cpp	/^parallel_vector_io::~parallel_vector_io() {$/;"	f	class:parallel_vector_io	signature:()
parallel_vector_io::~parallel_vector_io	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_vector_io.h	/^        virtual ~parallel_vector_io();$/;"	p	class:parallel_vector_io	access:public	signature:()
parent	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   void        *parent;      \/* Pointer to parent arg_xxx struct *\/$/;"	m	struct:arg_hdr	access:public
parent	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   void **parent;           \/* Array of pointers to offending arg_xxx struct *\/$/;"	m	struct:arg_end	access:public
parse_parameters	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/parse_parameters.h	/^int parse_parameters(int argn, char **argv, $/;"	f	signature:(int argn, char **argv, PartitionConfig & partition_config, std::string & graph_filename)
peID	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^    PEID   peID:15; \/\/ save a little bit of memory$/;"	m	struct:AdditionalNonLocalNodeData	access:public
perform_parallel_label_compression	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/parallel_label_compress.cpp	/^void parallel_label_compress::perform_parallel_label_compression( PartitionConfig & config, $/;"	f	class:parallel_label_compress	signature:( PartitionConfig & config, parallel_graph_access & G, bool balance, bool for_coarsening)
perform_parallel_label_compression	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/parallel_label_compress.h	/^        void perform_parallel_label_compression( PartitionConfig & config, $/;"	p	class:parallel_label_compress	access:public	signature:( PartitionConfig & config, parallel_graph_access & G, bool balance, bool for_coarsening = true)
perform_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.cpp	/^void distributed_partitioner::perform_partitioning( PartitionConfig & partition_config, parallel_graph_access & G) {$/;"	f	class:distributed_partitioner	signature:( PartitionConfig & partition_config, parallel_graph_access & G)
perform_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        void perform_partitioning( PartitionConfig & config, parallel_graph_access & G);$/;"	p	class:distributed_partitioner	access:public	signature:( PartitionConfig & config, parallel_graph_access & G)
perform_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/distributed_evolutionary_partitioning.cpp	/^void distributed_evolutionary_partitioning::perform_partitioning( PartitionConfig & config, $/;"	f	class:distributed_evolutionary_partitioning	signature:( PartitionConfig & config, parallel_graph_access & Q)
perform_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/distributed_evolutionary_partitioning.h	/^        void perform_partitioning( PartitionConfig & config, parallel_graph_access & G);$/;"	p	class:distributed_evolutionary_partitioning	access:public	signature:( PartitionConfig & config, parallel_graph_access & G)
perform_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/initial_partitioning.cpp	/^void initial_partitioning_algorithm::perform_partitioning( PartitionConfig & config, parallel_graph_access & Q) {$/;"	f	class:initial_partitioning_algorithm	signature:( PartitionConfig & config, parallel_graph_access & Q)
perform_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/initial_partitioning.h	/^        void perform_partitioning( PartitionConfig & config, parallel_graph_access & G);$/;"	p	class:initial_partitioning_algorithm	access:public	signature:( PartitionConfig & config, parallel_graph_access & G)
perform_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/random_initial_partitioning.cpp	/^void random_initial_partitioning::perform_partitioning( PartitionConfig & config, parallel_graph_access & G) {$/;"	f	class:random_initial_partitioning	signature:( PartitionConfig & config, parallel_graph_access & G)
perform_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/random_initial_partitioning.h	/^        void perform_partitioning( PartitionConfig & config, parallel_graph_access & G);$/;"	p	class:random_initial_partitioning	access:public	signature:( PartitionConfig & config, parallel_graph_access & G)
permutate_entries	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                        static void permutate_entries(const PartitionConfig & partition_config, $/;"	f	class:random_functions	access:public	signature:(const PartitionConfig & partition_config, std::vector<sometype> & vec, bool init)
permutate_vector_fast	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                        static void permutate_vector_fast(std::vector<sometype> & vec, bool init) {$/;"	f	class:random_functions	access:public	signature:(std::vector<sometype> & vec, bool init)
permutate_vector_good	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                        static void permutate_vector_good(std::vector<sometype> & vec, bool init) {$/;"	f	class:random_functions	access:public	signature:(std::vector<sometype> & vec, bool init)
permutate_vector_good_small	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                        static void permutate_vector_good_small(std::vector<sometype> & vec) {$/;"	f	class:random_functions	access:public	signature:(std::vector<sometype> & vec)
permutation_quality	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        PermutationQuality permutation_quality;$/;"	m	struct:PartitionConfig	access:public
printMemoryUsage	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        unsigned int printMemoryUsage(std::ostream& out, const std::string descr, const unsigned int mem) const {$/;"	f	class:parallel_graph_access	access:public	signature:(std::ostream& out, const std::string descr, const unsigned int mem) const
printMemoryUsage	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void printMemoryUsage(std::ostream& out) const {$/;"	f	class:parallel_graph_access	access:public	signature:(std::ostream& out) const
priv	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   void        *priv;        \/* Pointer to private header data for use by arg_xxx functions *\/$/;"	m	struct:arg_hdr	access:public
propagate_block_down	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_block_down_propagation.cpp	/^void parallel_block_down_propagation::propagate_block_down( PartitionConfig & config, $/;"	f	class:parallel_block_down_propagation	signature:( PartitionConfig & config, parallel_graph_access & G, parallel_graph_access & Q)
propagate_block_down	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_block_down_propagation.h	/^        void propagate_block_down( PartitionConfig & config, $/;"	p	class:parallel_block_down_propagation	access:public	signature:( PartitionConfig & config, parallel_graph_access & G, parallel_graph_access & Q)
random_functions	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.cpp	/^random_functions::random_functions()  {$/;"	f	class:random_functions	signature:()
random_functions	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                random_functions();$/;"	p	class:random_functions	access:public	signature:()
random_functions	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^class random_functions {$/;"	c
random_functions::circular_permutation	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                        static void circular_permutation(std::vector<sometype> & vec) {$/;"	f	class:random_functions	access:public	signature:(std::vector<sometype> & vec)
random_functions::m_mt	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.cpp	/^MersenneTwister random_functions::m_mt;$/;"	m	class:random_functions	file:
random_functions::m_mt	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                static MersenneTwister m_mt;$/;"	m	class:random_functions	access:private
random_functions::m_seed	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.cpp	/^int random_functions::m_seed = 0;$/;"	m	class:random_functions	file:
random_functions::m_seed	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                static int m_seed;$/;"	m	class:random_functions	access:private
random_functions::nextBool	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                static bool nextBool() {$/;"	f	class:random_functions	access:public	signature:()
random_functions::nextDouble	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                static double nextDouble(double lb, double rb) {$/;"	f	class:random_functions	access:public	signature:(double lb, double rb)
random_functions::nextInt	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                static unsigned nextInt(unsigned int lb, unsigned int rb) {$/;"	f	class:random_functions	access:public	signature:(unsigned int lb, unsigned int rb)
random_functions::permutate_entries	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                        static void permutate_entries(const PartitionConfig & partition_config, $/;"	f	class:random_functions	access:public	signature:(const PartitionConfig & partition_config, std::vector<sometype> & vec, bool init)
random_functions::permutate_vector_fast	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                        static void permutate_vector_fast(std::vector<sometype> & vec, bool init) {$/;"	f	class:random_functions	access:public	signature:(std::vector<sometype> & vec, bool init)
random_functions::permutate_vector_good	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                        static void permutate_vector_good(std::vector<sometype> & vec, bool init) {$/;"	f	class:random_functions	access:public	signature:(std::vector<sometype> & vec, bool init)
random_functions::permutate_vector_good_small	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                        static void permutate_vector_good_small(std::vector<sometype> & vec) {$/;"	f	class:random_functions	access:public	signature:(std::vector<sometype> & vec)
random_functions::random_functions	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.cpp	/^random_functions::random_functions()  {$/;"	f	class:random_functions	signature:()
random_functions::random_functions	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                random_functions();$/;"	p	class:random_functions	access:public	signature:()
random_functions::setSeed	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                static void setSeed(int seed) {$/;"	f	class:random_functions	access:public	signature:(int seed)
random_functions::~random_functions	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.cpp	/^random_functions::~random_functions() {$/;"	f	class:random_functions	signature:()
random_functions::~random_functions	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                virtual ~random_functions();$/;"	p	class:random_functions	access:public	signature:()
random_initial_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/random_initial_partitioning.cpp	/^random_initial_partitioning::random_initial_partitioning() {$/;"	f	class:random_initial_partitioning	signature:()
random_initial_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/random_initial_partitioning.h	/^        random_initial_partitioning();$/;"	p	class:random_initial_partitioning	access:public	signature:()
random_initial_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/random_initial_partitioning.h	/^class random_initial_partitioning {$/;"	c
random_initial_partitioning::perform_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/random_initial_partitioning.cpp	/^void random_initial_partitioning::perform_partitioning( PartitionConfig & config, parallel_graph_access & G) {$/;"	f	class:random_initial_partitioning	signature:( PartitionConfig & config, parallel_graph_access & G)
random_initial_partitioning::perform_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/random_initial_partitioning.h	/^        void perform_partitioning( PartitionConfig & config, parallel_graph_access & G);$/;"	p	class:random_initial_partitioning	access:public	signature:( PartitionConfig & config, parallel_graph_access & G)
random_initial_partitioning::random_initial_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/random_initial_partitioning.cpp	/^random_initial_partitioning::random_initial_partitioning() {$/;"	f	class:random_initial_partitioning	signature:()
random_initial_partitioning::random_initial_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/random_initial_partitioning.h	/^        random_initial_partitioning();$/;"	p	class:random_initial_partitioning	access:public	signature:()
random_initial_partitioning::~random_initial_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/random_initial_partitioning.cpp	/^random_initial_partitioning::~random_initial_partitioning() {$/;"	f	class:random_initial_partitioning	signature:()
random_initial_partitioning::~random_initial_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/random_initial_partitioning.h	/^        virtual ~random_initial_partitioning();$/;"	p	class:random_initial_partitioning	access:public	signature:()
random_up_to	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/utils.h	/^uint_fast64_t random_up_to(mrg_state* st, uint_fast64_t n);$/;"	p	signature:(mrg_state* st, uint_fast64_t n)
rank	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        PEID rank;$/;"	m	class:parallel_graph_access	access:private
readGraphWeighted	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.cpp	/^int parallel_graph_io::readGraphWeighted(parallel_graph_access & G, $/;"	f	class:parallel_graph_io	signature:(parallel_graph_access & G, std::string filename, PEID peID, PEID comm_size)
readGraphWeighted	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.h	/^        static int readGraphWeighted(parallel_graph_access & G, $/;"	p	class:parallel_graph_io	access:public	signature:(parallel_graph_access & G, std::string filename, PEID peID, PEID comm_size)
readVectorSequentially	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_vector_io.h	/^        void readVectorSequentially(std::vector<vectortype> & vec, std::string filename);$/;"	p	class:parallel_vector_io	access:public	signature:(std::vector<vectortype> & vec, std::string filename)
readVectorSequentially	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_vector_io.h	/^void parallel_vector_io::readVectorSequentially(std::vector<vectortype> & vec, std::string filename) {$/;"	f	class:parallel_vector_io	signature:(std::vector<vectortype> & vec, std::string filename)
receive_messages_of_neighbors	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void receive_messages_of_neighbors();$/;"	p	class:ghost_node_communication	access:private	signature:()
receive_messages_of_neighbors	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^void ghost_node_communication::receive_messages_of_neighbors() {$/;"	f	class:ghost_node_communication	signature:()
redistribute_hased_graph_and_build_graph_locally	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.cpp	/^void parallel_contraction::redistribute_hased_graph_and_build_graph_locally( hashed_graph &  hG, $/;"	f	class:parallel_contraction	signature:( hashed_graph & hG, std::unordered_map< NodeID, NodeWeight > & node_weights, NodeID number_of_cnodes, parallel_graph_access & Q )
redistribute_hased_graph_and_build_graph_locally	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.h	/^        void redistribute_hased_graph_and_build_graph_locally( hashed_graph &  hG, $/;"	p	class:parallel_contraction	access:private	signature:( hashed_graph & hG, std::unordered_map< NodeID, NodeWeight > & node_weights, NodeID number_of_cnodes, parallel_graph_access & Q)
reinit	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void reinit();$/;"	p	class:parallel_graph_access	access:public	signature:()
resetfn	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   arg_resetfn *resetfn;     \/* Pointer to parent arg_xxx reset function *\/$/;"	m	struct:arg_hdr	access:public
restart	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/timer.h	/^                void restart() { $/;"	f	class:timer	access:public	signature:()
run_collective_dummy_operations	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/dummy_operations.cpp	/^void dummy_operations::run_collective_dummy_operations() {$/;"	f	class:dummy_operations	signature:()
run_collective_dummy_operations	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/dummy_operations.h	/^        void run_collective_dummy_operations();$/;"	p	class:dummy_operations	access:public	signature:()
s	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^  uint_fast32_t s, t, u, v, w;$/;"	m	struct:mrg_transition_matrix	file:	access:public
scanfn	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   arg_scanfn  *scanfn;      \/* Pointer to parent arg_xxx scan function *\/$/;"	m	struct:arg_hdr	access:public
scramble	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.c	/^static inline int64_t scramble(int64_t v0, int lgN, uint64_t val0, uint64_t val1) {$/;"	f	file:	signature:(int64_t v0, int lgN, uint64_t val0, uint64_t val1)
seed	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        int seed;$/;"	m	struct:PartitionConfig	access:public
setBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.h	/^        virtual void setBlockSize( PartitionID block, NodeWeight block_size ) = 0;$/;"	p	class:balance_management	access:public	signature:( PartitionID block, NodeWeight block_size )
setBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.h	/^        virtual void setBlockSize( PartitionID block, NodeWeight block_size );$/;"	p	class:balance_management_coarsening	access:public	signature:( PartitionID block, NodeWeight block_size )
setBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.h	/^void balance_management_coarsening::setBlockSize( PartitionID block, NodeWeight block_size ) {$/;"	f	class:balance_management_coarsening	signature:( PartitionID block, NodeWeight block_size )
setBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.h	/^        virtual void setBlockSize( PartitionID block, NodeWeight block_size ) ;$/;"	p	class:balance_management_refinement	access:public	signature:( PartitionID block, NodeWeight block_size )
setBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.h	/^void balance_management_refinement::setBlockSize( PartitionID block, NodeWeight block_size ) {$/;"	f	class:balance_management_refinement	signature:( PartitionID block, NodeWeight block_size )
setBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void setBlockSize( PartitionID block, NodeWeight block_size );$/;"	p	class:parallel_graph_access	access:public	signature:( PartitionID block, NodeWeight block_size )
setBlockSize	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^void parallel_graph_access::setBlockSize( PartitionID block, NodeWeight block_size ) {$/;"	f	class:parallel_graph_access	signature:( PartitionID block, NodeWeight block_size )
setCNode	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void setCNode( NodeID node, NodeID cnode) {$/;"	f	class:parallel_graph_access	access:public	signature:( NodeID node, NodeID cnode)
setEdgeWeight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void setEdgeWeight(EdgeID e, EdgeWeight weight); $/;"	p	class:parallel_graph_access	access:public	signature:(EdgeID e, EdgeWeight weight)
setEdgeWeight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline void parallel_graph_access::setEdgeWeight(EdgeID e, EdgeWeight weight) {$/;"	f	class:parallel_graph_access	signature:(EdgeID e, EdgeWeight weight)
setGraphReference	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void setGraphReference( parallel_graph_access * G ) {$/;"	f	class:ghost_node_communication	access:public	signature:( parallel_graph_access * G )
setNodeLabel	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void setNodeLabel(NodeID node, NodeID label); $/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node, NodeID label)
setNodeLabel	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline void parallel_graph_access::setNodeLabel(NodeID node, NodeID label) {$/;"	f	class:parallel_graph_access	signature:(NodeID node, NodeID label)
setNodeWeight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void setNodeWeight(NodeID node, NodeWeight weight); $/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node, NodeWeight weight)
setNodeWeight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline void parallel_graph_access::setNodeWeight(NodeID node, NodeWeight weight) {$/;"	f	class:parallel_graph_access	signature:(NodeID node, NodeWeight weight)
setSecondPartitionIndex	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void setSecondPartitionIndex(NodeID node, NodeID label); $/;"	p	class:parallel_graph_access	access:public	signature:(NodeID node, NodeID label)
setSecondPartitionIndex	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^void parallel_graph_access::setSecondPartitionIndex(NodeID node, NodeID block) {$/;"	f	class:parallel_graph_access	signature:(NodeID node, NodeID block)
setSeed	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                static void setSeed(int seed) {$/;"	f	class:random_functions	access:public	signature:(int seed)
set_comm_rounds	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.cpp	/^void parallel_graph_access::set_comm_rounds(unsigned long comm_rounds) {$/;"	f	class:parallel_graph_access	signature:(unsigned long comm_rounds)
set_comm_rounds	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        static void set_comm_rounds(unsigned long comm_rounds); $/;"	p	class:parallel_graph_access	access:public	signature:(unsigned long comm_rounds)
set_comm_rounds_up	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.cpp	/^void parallel_graph_access::set_comm_rounds_up(unsigned long comm_rounds) {$/;"	f	class:parallel_graph_access	signature:(unsigned long comm_rounds)
set_comm_rounds_up	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        static void set_comm_rounds_up(unsigned long comm_rounds); $/;"	p	class:parallel_graph_access	access:public	signature:(unsigned long comm_rounds)
set_desired_rounds	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void set_desired_rounds( unsigned long desired_rounds) {$/;"	f	class:ghost_node_communication	access:public	signature:( unsigned long desired_rounds)
set_number_of_global_edges	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void set_number_of_global_edges( EdgeID global_edges) {m_global_m = global_edges;};$/;"	f	class:parallel_graph_access	access:public	signature:( EdgeID global_edges)
set_range	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void set_range(NodeID l, NodeID r) {$/;"	f	class:parallel_graph_access	access:public	signature:(NodeID l, NodeID r)
set_skip_limit	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void set_skip_limit( unsigned long skip_limit ) {$/;"	f	class:ghost_node_communication	access:public	signature:( unsigned long skip_limit )
shortopts	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   const char  *shortopts;   \/* String defining the short options *\/$/;"	m	struct:arg_hdr	access:public
size	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        PEID size;$/;"	m	class:parallel_graph_access	access:private
source	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/hashed_graph.h	/^        NodeID source;$/;"	m	struct:hashed_edge	access:public
source	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^        NodeID source;$/;"	m	struct:source_target_pair	access:public
source_target_pair	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^struct source_target_pair {$/;"	s
source_target_pair::source	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^        NodeID source;$/;"	m	struct:source_target_pair	access:public
source_target_pair::target	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^        NodeID target;$/;"	m	struct:source_target_pair	access:public
standard	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	/^                void standard( PartitionConfig & config );$/;"	p	class:configuration	access:public	signature:( PartitionConfig & config )
standard	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	/^inline void configuration::standard( PartitionConfig & partition_config ) {$/;"	f	class:configuration	signature:( PartitionConfig & partition_config )
start_construction	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void start_construction(NodeID n, EdgeID m, NodeID global_n, NodeID global_m, bool update_comm_rounds = true) {$/;"	f	class:parallel_graph_access	access:public	signature:(NodeID n, EdgeID m, NodeID global_n, NodeID global_m, bool update_comm_rounds = true)
stop_factor	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        int stop_factor;$/;"	m	struct:PartitionConfig	access:public
stop_rule	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/stop_rule.h	/^        stop_rule() {} ;$/;"	f	class:stop_rule	access:public	signature:()
stop_rule	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/stop_rule.h	/^class stop_rule {$/;"	c
stop_rule::contraction_stop	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/stop_rule.h	/^        bool contraction_stop( PartitionConfig & config, parallel_graph_access & finer, parallel_graph_access & coarser) {$/;"	f	class:stop_rule	access:public	signature:( PartitionConfig & config, parallel_graph_access & finer, parallel_graph_access & coarser)
stop_rule::stop_rule	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/stop_rule.h	/^        stop_rule() {} ;$/;"	f	class:stop_rule	access:public	signature:()
stop_rule::~stop_rule	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/stop_rule.h	/^        virtual ~stop_rule() {};$/;"	f	class:stop_rule	access:public	signature:()
strong	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	/^                void strong( PartitionConfig & config );$/;"	p	class:configuration	access:public	signature:( PartitionConfig & config )
strong	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	/^inline void configuration::strong( PartitionConfig & partition_config ) {$/;"	f	class:configuration	signature:( PartitionConfig & partition_config )
sval	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   const char **sval;       \/* Array of parsed argument values *\/$/;"	m	struct:arg_rex	access:public
sval	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   const char **sval;       \/* Array of parsed argument values *\/$/;"	m	struct:arg_str	access:public
t	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^  uint_fast32_t s, t, u, v, w;$/;"	m	struct:mrg_transition_matrix	file:	access:public
target	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/hashed_graph.h	/^        NodeID target;$/;"	m	struct:hashed_edge	access:public
target	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/definitions.h	/^        NodeID target;$/;"	m	struct:source_target_pair	access:public
time_limit	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        double time_limit;$/;"	m	struct:PartitionConfig	access:public
timer	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/timer.h	/^                timer() {$/;"	f	class:timer	access:public	signature:()
timer	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/timer.h	/^class timer {$/;"	c
timer::elapsed	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/timer.h	/^                double elapsed() { $/;"	f	class:timer	access:public	signature:()
timer::m_start	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/timer.h	/^                double m_start;$/;"	m	class:timer	access:private
timer::restart	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/timer.h	/^                void restart() { $/;"	f	class:timer	access:public	signature:()
timer::timer	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/timer.h	/^                timer() {$/;"	f	class:timer	access:public	signature:()
timer::timestamp	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/timer.h	/^                inline double timestamp() {$/;"	f	class:timer	access:private	signature:()
timestamp	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/timer.h	/^                inline double timestamp() {$/;"	f	class:timer	access:private	signature:()
tmval	/home/c_schulz/projects/coding/parallel_social_partitioning/src/extern/argtable-2.10/include/argtable2.h	/^   struct tm *tmval;        \/* Array of parsed time values *\/$/;"	m	struct:arg_date	typeref:struct:arg_date::tm	access:public
to	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        NodeID to; $/;"	m	class:parallel_graph_access	access:private
total_num_labels	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        NodeID total_num_labels;$/;"	m	struct:PartitionConfig	access:public
u	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^  uint_fast32_t s, t, u, v, w;$/;"	m	struct:mrg_transition_matrix	file:	access:public
ultrafast	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	/^                void ultrafast( PartitionConfig & config );$/;"	p	class:configuration	access:public	signature:( PartitionConfig & config )
ultrafast	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	/^inline void configuration::ultrafast( PartitionConfig & partition_config ) {$/;"	f	class:configuration	signature:( PartitionConfig & partition_config )
update	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.h	/^        virtual void update() = 0;$/;"	p	class:balance_management	access:public	signature:()
update	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.cpp	/^void balance_management_coarsening::update( ) {$/;"	f	class:balance_management_coarsening	signature:( )
update	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.h	/^        virtual void update();$/;"	p	class:balance_management_coarsening	access:public	signature:()
update	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.cpp	/^void balance_management_refinement::update() {$/;"	f	class:balance_management_refinement	signature:()
update	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.h	/^        virtual void update();$/;"	p	class:balance_management_refinement	access:public	signature:()
update_block_weights	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.cpp	/^void parallel_graph_access::update_block_weights() {$/;"	f	class:parallel_graph_access	signature:()
update_block_weights	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void update_block_weights();$/;"	p	class:parallel_graph_access	access:public	signature:()
update_ghost_node_data	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.cpp	/^void parallel_graph_access::update_ghost_node_data( bool check_iteration_counter ) {$/;"	f	class:parallel_graph_access	signature:( bool check_iteration_counter )
update_ghost_node_data	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void update_ghost_node_data( bool check_iteration_counter );$/;"	p	class:ghost_node_communication	access:public	signature:( bool check_iteration_counter )
update_ghost_node_data	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void update_ghost_node_data( bool check_iteration_counter = true );$/;"	p	class:parallel_graph_access	access:public	signature:( bool check_iteration_counter = true )
update_ghost_node_data	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline void ghost_node_communication::update_ghost_node_data( bool check_iteration_counter ) {$/;"	f	class:ghost_node_communication	signature:( bool check_iteration_counter )
update_ghost_node_data_finish	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.cpp	/^void parallel_graph_access::update_ghost_node_data_finish() {$/;"	f	class:parallel_graph_access	signature:()
update_ghost_node_data_finish	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void update_ghost_node_data_finish();$/;"	p	class:ghost_node_communication	access:public	signature:()
update_ghost_node_data_finish	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void update_ghost_node_data_finish();$/;"	p	class:parallel_graph_access	access:public	signature:()
update_ghost_node_data_finish	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline void ghost_node_communication::update_ghost_node_data_finish() {$/;"	f	class:ghost_node_communication	signature:()
update_ghost_node_data_global	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.cpp	/^void parallel_graph_access::update_ghost_node_data_global() {$/;"	f	class:parallel_graph_access	signature:()
update_ghost_node_data_global	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void update_ghost_node_data_global();$/;"	p	class:ghost_node_communication	access:public	signature:()
update_ghost_node_data_global	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void update_ghost_node_data_global();$/;"	p	class:parallel_graph_access	access:public	signature:()
update_ghost_node_data_global	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^inline void ghost_node_communication::update_ghost_node_data_global() {$/;"	f	class:ghost_node_communication	signature:()
update_ghost_nodes_blocks	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_block_down_propagation.cpp	/^void parallel_block_down_propagation::update_ghost_nodes_blocks( parallel_graph_access & G ) {$/;"	f	class:parallel_block_down_propagation	signature:( parallel_graph_access & G )
update_ghost_nodes_blocks	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_block_down_propagation.h	/^        void update_ghost_nodes_blocks( parallel_graph_access & G ); $/;"	p	class:parallel_block_down_propagation	access:private	signature:( parallel_graph_access & G )
update_ghost_nodes_weights	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.cpp	/^void parallel_contraction::update_ghost_nodes_weights( parallel_graph_access & G ) {$/;"	f	class:parallel_contraction	signature:( parallel_graph_access & G )
update_ghost_nodes_weights	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.h	/^        void update_ghost_nodes_weights( parallel_graph_access & G ); $/;"	p	class:parallel_contraction	access:private	signature:( parallel_graph_access & G )
update_non_contained_block_balance	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.h	/^        virtual void update_non_contained_block_balance( PartitionID from, PartitionID to, NodeWeight node_weight) = 0;$/;"	p	class:balance_management	access:public	signature:( PartitionID from, PartitionID to, NodeWeight node_weight)
update_non_contained_block_balance	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.h	/^        virtual void update_non_contained_block_balance( PartitionID from, PartitionID to, NodeWeight node_weight);$/;"	p	class:balance_management_coarsening	access:public	signature:( PartitionID from, PartitionID to, NodeWeight node_weight)
update_non_contained_block_balance	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.h	/^void balance_management_coarsening::update_non_contained_block_balance( PartitionID from, PartitionID to, NodeWeight node_weight) {$/;"	f	class:balance_management_coarsening	signature:( PartitionID from, PartitionID to, NodeWeight node_weight)
update_non_contained_block_balance	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.h	/^        virtual void update_non_contained_block_balance( PartitionID from, PartitionID to, NodeWeight node_weight) {\/*noop*\/};$/;"	f	class:balance_management_refinement	access:public	signature:( PartitionID from, PartitionID to, NodeWeight node_weight)
update_non_contained_block_balance	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.cpp	/^void parallel_graph_access::update_non_contained_block_balance( PartitionID from, PartitionID to, NodeWeight node_weight) {$/;"	f	class:parallel_graph_access	signature:( PartitionID from, PartitionID to, NodeWeight node_weight)
update_non_contained_block_balance	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        void update_non_contained_block_balance( PartitionID from, PartitionID to, NodeWeight node_weight);$/;"	p	class:parallel_graph_access	access:public	signature:( PartitionID from, PartitionID to, NodeWeight node_weight)
upper_bound_cluster	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^	NodeWeight upper_bound_cluster;$/;"	m	struct:PartitionConfig	access:public
upper_bound_partition	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^	NodeWeight upper_bound_partition;$/;"	m	struct:PartitionConfig	access:public
v	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^  uint_fast32_t s, t, u, v, w;$/;"	m	struct:mrg_transition_matrix	file:	access:public
v0	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.h	/^  int64_t v0;$/;"	m	struct:packed_edge	access:public
v0_low	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.h	/^  uint32_t v0_low;$/;"	m	struct:packed_edge	access:public
v1	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.h	/^  int64_t v1;$/;"	m	struct:packed_edge	access:public
v1_low	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.h	/^  uint32_t v1_low;$/;"	m	struct:packed_edge	access:public
vcycle	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.cpp	/^void distributed_partitioner::vcycle( PartitionConfig & partition_config, parallel_graph_access & G) {$/;"	f	class:distributed_partitioner	signature:( PartitionConfig & partition_config, parallel_graph_access & G)
vcycle	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        void vcycle( PartitionConfig & config, parallel_graph_access & G );$/;"	p	class:distributed_partitioner	access:private	signature:( PartitionConfig & config, parallel_graph_access & G )
vcycle	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/partition_config.h	/^        bool vcycle;$/;"	m	struct:PartitionConfig	access:public
w	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.c	/^  uint_fast32_t s, t, u, v, w;$/;"	m	struct:mrg_transition_matrix	file:	access:public
weight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/hashed_graph.h	/^        NodeWeight weight;$/;"	m	struct:data_hashed_edge	access:public
weight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^    EdgeWeight weight;$/;"	m	struct:Edge	access:public
weight	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^    NodeWeight weight:48; \/\/ save a little bit of memory$/;"	m	struct:NodeData	access:public
writeGraphParallelSimple	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.cpp	/^int parallel_graph_io::writeGraphParallelSimple(parallel_graph_access & G, $/;"	f	class:parallel_graph_io	signature:(parallel_graph_access & G, std::string filename)
writeGraphParallelSimple	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.h	/^        static int writeGraphParallelSimple(parallel_graph_access & G, $/;"	p	class:parallel_graph_io	access:public	signature:(parallel_graph_access & G, std::string filename)
writeGraphSequentially	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.cpp	/^int parallel_graph_io::writeGraphSequentially(complete_graph_access & G, std::ofstream & f) {$/;"	f	class:parallel_graph_io	signature:(complete_graph_access & G, std::ofstream & f)
writeGraphSequentially	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.cpp	/^int parallel_graph_io::writeGraphSequentially(complete_graph_access & G, std::string filename) {$/;"	f	class:parallel_graph_io	signature:(complete_graph_access & G, std::string filename)
writeGraphSequentially	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.h	/^        static int writeGraphSequentially(complete_graph_access & G, $/;"	p	class:parallel_graph_io	access:public	signature:(complete_graph_access & G, std::ofstream & f)
writeGraphSequentially	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.h	/^        static int writeGraphSequentially(complete_graph_access & G, $/;"	p	class:parallel_graph_io	access:public	signature:(complete_graph_access & G, std::string filename)
writeGraphWeightedParallelSimple	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.cpp	/^int parallel_graph_io::writeGraphWeightedParallelSimple(parallel_graph_access & G, $/;"	f	class:parallel_graph_io	signature:(parallel_graph_access & G, std::string filename)
writeGraphWeightedParallelSimple	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.h	/^        static int writeGraphWeightedParallelSimple(parallel_graph_access & G, $/;"	p	class:parallel_graph_io	access:public	signature:(parallel_graph_access & G, std::string filename)
writeGraphWeightedSequentially	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.cpp	/^int parallel_graph_io::writeGraphWeightedSequentially(complete_graph_access & G, std::string filename) {$/;"	f	class:parallel_graph_io	signature:(complete_graph_access & G, std::string filename)
writeGraphWeightedSequentially	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.h	/^        static int writeGraphWeightedSequentially(complete_graph_access & G, $/;"	p	class:parallel_graph_io	access:public	signature:(complete_graph_access & G, std::string filename)
writeVectorSequentially	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_vector_io.h	/^        void writeVectorSequentially(std::vector<vectortype> & vec, std::string filename);$/;"	p	class:parallel_vector_io	access:public	signature:(std::vector<vectortype> & vec, std::string filename)
writeVectorSequentially	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_vector_io.h	/^void parallel_vector_io::writeVectorSequentially(std::vector<vectortype> & vec, std::string filename) {$/;"	f	class:parallel_vector_io	signature:(std::vector<vectortype> & vec, std::string filename)
write_edge	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/graph_generator.h	/^static inline void write_edge(packed_edge* p, int64_t v0, int64_t v1) {$/;"	f	signature:(packed_edge* p, int64_t v0, int64_t v1)
xcalloc	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/utils.c	/^void* xcalloc(size_t n, size_t k) {$/;"	f	signature:(size_t n, size_t k)
xcalloc	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/utils.h	/^void* xcalloc(size_t n, size_t k);$/;"	p	signature:(size_t n, size_t k)
xmalloc	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/utils.c	/^void* xmalloc(size_t n) {$/;"	f	signature:(size_t n)
xmalloc	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/utils.h	/^void* xmalloc(size_t n);$/;"	p	signature:(size_t n)
xrealloc	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/utils.h	/^void* xrealloc(void* p, size_t nbytes); \/* In utils.c *\/$/;"	p	signature:(void* p, size_t nbytes)
z1	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.h	/^  uint_fast32_t z1, z2, z3, z4, z5;$/;"	m	struct:mrg_state	access:public
z2	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.h	/^  uint_fast32_t z1, z2, z3, z4, z5;$/;"	m	struct:mrg_state	access:public
z3	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.h	/^  uint_fast32_t z1, z2, z3, z4, z5;$/;"	m	struct:mrg_state	access:public
z4	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.h	/^  uint_fast32_t z1, z2, z3, z4, z5;$/;"	m	struct:mrg_state	access:public
z5	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/graph500_generator/splittable_mrg.h	/^  uint_fast32_t z1, z2, z3, z4, z5;$/;"	m	struct:mrg_state	access:public
~balance_management	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.cpp	/^balance_management::~balance_management() {$/;"	f	class:balance_management	signature:()
~balance_management	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management.h	/^        virtual ~balance_management();$/;"	p	class:balance_management	access:public	signature:()
~balance_management_coarsening	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.cpp	/^balance_management_coarsening::~balance_management_coarsening() {$/;"	f	class:balance_management_coarsening	signature:()
~balance_management_coarsening	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_coarsening.h	/^        virtual ~balance_management_coarsening();$/;"	p	class:balance_management_coarsening	access:public	signature:()
~balance_management_refinement	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.cpp	/^balance_management_refinement::~balance_management_refinement() {$/;"	f	class:balance_management_refinement	signature:()
~balance_management_refinement	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/balance_management_refinement.h	/^        virtual ~balance_management_refinement();$/;"	p	class:balance_management_refinement	access:public	signature:()
~configuration	/home/c_schulz/projects/coding/parallel_social_partitioning/src/app/configuration.h	/^                virtual ~configuration() {};$/;"	f	class:configuration	access:public	signature:()
~distributed_evolutionary_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/distributed_evolutionary_partitioning.cpp	/^distributed_evolutionary_partitioning::~distributed_evolutionary_partitioning() {$/;"	f	class:distributed_evolutionary_partitioning	signature:()
~distributed_evolutionary_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/distributed_evolutionary_partitioning.h	/^        virtual ~distributed_evolutionary_partitioning();$/;"	p	class:distributed_evolutionary_partitioning	access:public	signature:()
~distributed_partitioner	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.cpp	/^distributed_partitioner::~distributed_partitioner() {$/;"	f	class:distributed_partitioner	signature:()
~distributed_partitioner	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/distributed_partitioner.h	/^        virtual ~distributed_partitioner();$/;"	p	class:distributed_partitioner	access:public	signature:()
~distributed_quality_metrics	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.cpp	/^distributed_quality_metrics::~distributed_quality_metrics() {$/;"	f	class:distributed_quality_metrics	signature:()
~distributed_quality_metrics	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/distributed_quality_metrics.h	/^        virtual ~distributed_quality_metrics();$/;"	p	class:distributed_quality_metrics	access:public	signature:()
~dummy_operations	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/dummy_operations.cpp	/^dummy_operations::~dummy_operations() {$/;"	f	class:dummy_operations	signature:()
~dummy_operations	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/dummy_operations.h	/^        virtual ~dummy_operations();$/;"	p	class:dummy_operations	access:public	signature:()
~generate_g500_edgelist	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_g500_edgelist.cpp	/^generate_g500_edgelist::~generate_g500_edgelist() {$/;"	f	class:generate_g500_edgelist	signature:()
~generate_g500_edgelist	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_g500_edgelist.h	/^        virtual ~generate_g500_edgelist();$/;"	p	class:generate_g500_edgelist	access:public	signature:()
~generate_kronecker	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_kronecker.cpp	/^generate_kronecker::~generate_kronecker() {$/;"	f	class:generate_kronecker	signature:()
~generate_kronecker	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/graph_generation/generate_kronecker.h	/^        virtual ~generate_kronecker();$/;"	p	class:generate_kronecker	access:public	signature:()
~ghost_node_communication	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        virtual ~ghost_node_communication() {};$/;"	f	class:ghost_node_communication	access:public	signature:()
~helpers	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/helpers.h	/^        virtual ~helpers() {};$/;"	f	class:helpers	access:public	signature:()
~initial_partitioning_algorithm	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/initial_partitioning.cpp	/^initial_partitioning_algorithm::~initial_partitioning_algorithm() {$/;"	f	class:initial_partitioning_algorithm	signature:()
~initial_partitioning_algorithm	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/initial_partitioning.h	/^        virtual ~initial_partitioning_algorithm();$/;"	p	class:initial_partitioning_algorithm	access:public	signature:()
~mpi_tools	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/mpi_tools.cpp	/^mpi_tools::~mpi_tools() {$/;"	f	class:mpi_tools	signature:()
~mpi_tools	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/communication/mpi_tools.h	/^        virtual ~mpi_tools();$/;"	p	class:mpi_tools	access:public	signature:()
~node_ordering	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/node_ordering.cpp	/^node_ordering::~node_ordering() {$/;"	f	class:node_ordering	signature:()
~node_ordering	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/node_ordering.h	/^        virtual ~node_ordering();$/;"	p	class:node_ordering	access:public	signature:()
~parallel_block_down_propagation	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_block_down_propagation.cpp	/^parallel_block_down_propagation::~parallel_block_down_propagation() {$/;"	f	class:parallel_block_down_propagation	signature:()
~parallel_block_down_propagation	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_block_down_propagation.h	/^        virtual ~parallel_block_down_propagation();$/;"	p	class:parallel_block_down_propagation	access:public	signature:()
~parallel_contraction	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.cpp	/^parallel_contraction::~parallel_contraction() {$/;"	f	class:parallel_contraction	signature:()
~parallel_contraction	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_contraction.h	/^        virtual ~parallel_contraction();$/;"	p	class:parallel_contraction	access:public	signature:()
~parallel_graph_access	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.cpp	/^parallel_graph_access::~parallel_graph_access() {$/;"	f	class:parallel_graph_access	signature:()
~parallel_graph_access	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/data_structure/parallel_graph_access.h	/^        virtual ~parallel_graph_access();$/;"	p	class:parallel_graph_access	access:public	signature:()
~parallel_graph_io	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.cpp	/^parallel_graph_io::~parallel_graph_io() {$/;"	f	class:parallel_graph_io	signature:()
~parallel_graph_io	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_graph_io.h	/^        virtual ~parallel_graph_io();$/;"	p	class:parallel_graph_io	access:public	signature:()
~parallel_label_compress	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/parallel_label_compress.cpp	/^parallel_label_compress::~parallel_label_compress() {$/;"	f	class:parallel_label_compress	signature:()
~parallel_label_compress	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_label_compress/parallel_label_compress.h	/^        virtual ~parallel_label_compress();$/;"	p	class:parallel_label_compress	access:public	signature:()
~parallel_projection	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_projection.cpp	/^parallel_projection::~parallel_projection() {$/;"	f	class:parallel_projection	signature:()
~parallel_projection	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/parallel_contraction_projection/parallel_projection.h	/^        virtual ~parallel_projection();$/;"	p	class:parallel_projection	access:public	signature:()
~parallel_vector_io	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_vector_io.cpp	/^parallel_vector_io::~parallel_vector_io() {$/;"	f	class:parallel_vector_io	signature:()
~parallel_vector_io	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/io/parallel_vector_io.h	/^        virtual ~parallel_vector_io();$/;"	p	class:parallel_vector_io	access:public	signature:()
~random_functions	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.cpp	/^random_functions::~random_functions() {$/;"	f	class:random_functions	signature:()
~random_functions	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/tools/random_functions.h	/^                virtual ~random_functions();$/;"	p	class:random_functions	access:public	signature:()
~random_initial_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/random_initial_partitioning.cpp	/^random_initial_partitioning::~random_initial_partitioning() {$/;"	f	class:random_initial_partitioning	signature:()
~random_initial_partitioning	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/initial_partitioning/random_initial_partitioning.h	/^        virtual ~random_initial_partitioning();$/;"	p	class:random_initial_partitioning	access:public	signature:()
~stop_rule	/home/c_schulz/projects/coding/parallel_social_partitioning/src/lib/distributed_partitioning/stop_rule.h	/^        virtual ~stop_rule() {};$/;"	f	class:stop_rule	access:public	signature:()
